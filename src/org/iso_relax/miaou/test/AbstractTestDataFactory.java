package org.iso_relax.miaou.test;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractTestDataFactory is generated by Relaxer based on testData.rng.
 *
 * @version testData.rng 1.0 (Sat Sep 07 22:04:57 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public abstract class AbstractTestDataFactory implements ITestDataFactory {
    protected static org.xml.sax.ErrorHandler errorHandler;

    /**
     * Sets a error handler to handle parsing error.
     *
     * @param handler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler handler) {
        errorHandler = handler;
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(file, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(file);
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(uri, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(uri);
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(url, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(url);
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(in, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(in);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(is, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(is);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(reader, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(reader);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (RootTestData.isMatch(element)) {
            RootTestData node = createRootTestData();
            node.setup(element);
            return(node);
        } else if (RootTestDataCase.isMatch(element)) {
            RootTestDataCase node = createRootTestDataCase();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Element element) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(element);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>RootTestData</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestData(File file) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(UJAXP.getDocument(file, errorHandler));
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(File file) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(UJAXP.getDocument(file, errorHandler));
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        rootTestData_.setup(file);
        rootTestData_.setRContext(rContext);
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        rootTestDataCase_.setup(file);
        rootTestDataCase_.setRContext(rContext);
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestData(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(UJAXP.getDocument(uri, errorHandler));
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(UJAXP.getDocument(uri, errorHandler));
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        rootTestData_.setup(uri);
        rootTestData_.setRContext(rContext);
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        rootTestDataCase_.setup(uri);
        rootTestDataCase_.setRContext(rContext);
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestData(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(UJAXP.getDocument(url, errorHandler));
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(UJAXP.getDocument(url, errorHandler));
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        rootTestData_.setup(url);
        rootTestData_.setRContext(rContext);
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        rootTestDataCase_.setup(url);
        rootTestDataCase_.setRContext(rContext);
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestData(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(UJAXP.getDocument(in, errorHandler));
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(UJAXP.getDocument(in, errorHandler));
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData(in);
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase(in);
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestData(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(UJAXP.getDocument(is, errorHandler));
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(UJAXP.getDocument(is, errorHandler));
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData(is);
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase(is);
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestData(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(UJAXP.getDocument(reader, errorHandler));
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(UJAXP.getDocument(reader, errorHandler));
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootTestData rootTestData_ = createRootTestData(reader);
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase(reader);
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> with Context.
     *
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext() {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> with Context.
     *
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext() {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootTestData
     */
    public RootTestData createRootTestData(Document doc) {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(doc);
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(Document doc) {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(doc);
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(Document doc) {
        RootTestData rootTestData_ = createRootTestData(doc);
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(Document doc) {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase(doc);
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootTestData
     */
    public RootTestData createRootTestData(Element element) {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(element);
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(Element element) {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(element);
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(Element element) {
        RootTestData rootTestData_ = createRootTestData(element);
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(Element element) {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase(element);
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootTestData
     */
    public RootTestData createRootTestData(RStack stack) {
        RootTestData rootTestData_ = createRootTestData();
        rootTestData_.setup(stack);
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCase(RStack stack) {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase();
        rootTestDataCase_.setup(stack);
        return (rootTestDataCase_);
    }

    /**
     * Creates a <code>RootTestData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootTestData
     */
    public RootTestData createRootTestDataWithContext(RStack stack) {
        RootTestData rootTestData_ = createRootTestData(stack);
        rootTestData_.setRContext(createRContext());
        return (rootTestData_);
    }

    /**
     * Creates a <code>RootTestDataCase</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootTestDataCase
     */
    public RootTestDataCase createRootTestDataCaseWithContext(RStack stack) {
        RootTestDataCase rootTestDataCase_ = createRootTestDataCase(stack);
        rootTestDataCase_.setRContext(createRContext());
        return (rootTestDataCase_);
    }

    /**
     * Creates a default <code>RContext</code>.
     * This method is a hook method of the AbstractTestDataFactory.
     *
     * @return RContext
     */
    public RContext createRContext() {
        return (new RContext());
    }
}
