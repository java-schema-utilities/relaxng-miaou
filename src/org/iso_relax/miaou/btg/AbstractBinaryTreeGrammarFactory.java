package org.iso_relax.miaou.btg;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractBinaryTreeGrammarFactory is generated by Relaxer based on binaryTreeGrammar.rng.
 *
 * @version binaryTreeGrammar.rng 1.0 (Sat Oct 19 02:26:54 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public abstract class AbstractBinaryTreeGrammarFactory implements IBinaryTreeGrammarFactory {
    protected static org.xml.sax.ErrorHandler errorHandler;

    /**
     * Gets a error handler to handle parsing error.
     *
     * @param handler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler handler) {
        errorHandler = handler;
    }

    /**
     * @return org.xml.sax.ErrorHandler
     */
    public org.xml.sax.ErrorHandler getErrorHandler() {
        return (errorHandler);
    }

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(File file) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(file, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(String uri) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(uri, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(URL url) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(url, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(in, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(is, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(reader, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (BinaryTreeGrammar.isMatch(element)) {
            BinaryTreeGrammar node = createBinaryTreeGrammar();
            node.setup(element);
            return(node);
        } else if (BinaryTreeGrammarStart.isMatch(element)) {
            BinaryTreeGrammarStart node = createBinaryTreeGrammarStart();
            node.setup(element);
            return(node);
        } else if (BtrExpElement.isMatch(element)) {
            BtrExpElement node = createBtrExpElement();
            node.setup(element);
            return(node);
        } else if (BtrExpOneOrMoreAttribute.isMatch(element)) {
            BtrExpOneOrMoreAttribute node = createBtrExpOneOrMoreAttribute();
            node.setup(element);
            return(node);
        } else if (BtrExpNonExistentAttribute.isMatch(element)) {
            BtrExpNonExistentAttribute node = createBtrExpNonExistentAttribute();
            node.setup(element);
            return(node);
        } else if (BtrExpInterleave.isMatch(element)) {
            BtrExpInterleave node = createBtrExpInterleave();
            node.setup(element);
            return(node);
        } else if (BtrExpAtomic.isMatch(element)) {
            BtrExpAtomic node = createBtrExpAtomic();
            node.setup(element);
            return(node);
        } else if (Data.isMatch(element)) {
            Data node = createData();
            node.setup(element);
            return(node);
        } else if (Param.isMatch(element)) {
            Param node = createParam();
            node.setup(element);
            return(node);
        } else if (Value.isMatch(element)) {
            Value node = createValue();
            node.setup(element);
            return(node);
        } else if (BtrExpList.isMatch(element)) {
            BtrExpList node = createBtrExpList();
            node.setup(element);
            return(node);
        } else if (BtrExpChoice.isMatch(element)) {
            BtrExpChoice node = createBtrExpChoice();
            node.setup(element);
            return(node);
        } else if (BtrExpProduct.isMatch(element)) {
            BtrExpProduct node = createBtrExpProduct();
            node.setup(element);
            return(node);
        } else if (BtrExpRef.isMatch(element)) {
            BtrExpRef node = createBtrExpRef();
            node.setup(element);
            return(node);
        } else if (BtrExpText.isMatch(element)) {
            BtrExpText node = createBtrExpText();
            node.setup(element);
            return(node);
        } else if (BtrExpOneOrMore.isMatch(element)) {
            BtrExpOneOrMore node = createBtrExpOneOrMore();
            node.setup(element);
            return(node);
        } else if (BtrExpNotAllowed.isMatch(element)) {
            BtrExpNotAllowed node = createBtrExpNotAllowed();
            node.setup(element);
            return(node);
        } else if (BtrExpEnd.isMatch(element)) {
            BtrExpEnd node = createBtrExpEnd();
            node.setup(element);
            return(node);
        } else if (BtrExpVariable.isMatch(element)) {
            BtrExpVariable node = createBtrExpVariable();
            node.setup(element);
            return(node);
        } else if (BinaryTreeGrammarRule.isMatch(element)) {
            BinaryTreeGrammarRule node = createBinaryTreeGrammarRule();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(File file) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(file, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(file, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(File file) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(file, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(String uri) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(uri, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(uri, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(String uri) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(uri, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(URL url) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(url, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(url, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(URL url) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(url, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(in, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(in, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(in, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(is, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(is, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(is, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(reader, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(reader, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(reader, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(Document doc) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(doc);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(Document doc) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(doc);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(Document doc) {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(doc);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Document doc) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(doc);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Document doc) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(doc);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(Document doc) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(doc);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(Document doc) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(doc);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Data
     */
    public Data createData(Document doc) {
        Data data_ = createData();
        data_.setup(doc);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParam(Document doc) {
        Param param_ = createParam();
        param_.setup(doc);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Value
     */
    public Value createValue(Document doc) {
        Value value_ = createValue();
        value_.setup(doc);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(Document doc) {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(doc);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(Document doc) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(doc);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(Document doc) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(doc);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(Document doc) {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(doc);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(Document doc) {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(doc);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(Document doc) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(doc);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(Document doc) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(doc);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(Document doc) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(doc);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(Document doc) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(doc);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(Document doc) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(doc);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(Element element) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(element);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(Element element) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(element);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(Element element) {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(element);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Element element) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(element);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Element element) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(element);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(Element element) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(element);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(Element element) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(element);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Data
     */
    public Data createData(Element element) {
        Data data_ = createData();
        data_.setup(element);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParam(Element element) {
        Param param_ = createParam();
        param_.setup(element);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Value
     */
    public Value createValue(Element element) {
        Value value_ = createValue();
        value_.setup(element);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(Element element) {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(element);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(Element element) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(element);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(Element element) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(element);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(Element element) {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(element);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(Element element) {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(element);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(Element element) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(element);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(Element element) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(element);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(Element element) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(element);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(Element element) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(element);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(Element element) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(element);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(RStack stack) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(stack);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(RStack stack) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(stack);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(RStack stack) {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(stack);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(RStack stack) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(stack);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(RStack stack) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(stack);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(RStack stack) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(stack);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(RStack stack) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(stack);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Data
     */
    public Data createData(RStack stack) {
        Data data_ = createData();
        data_.setup(stack);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParam(RStack stack) {
        Param param_ = createParam();
        param_.setup(stack);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Value
     */
    public Value createValue(RStack stack) {
        Value value_ = createValue();
        value_.setup(stack);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(RStack stack) {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(stack);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(RStack stack) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(stack);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(RStack stack) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(stack);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(RStack stack) {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(stack);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(RStack stack) {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(stack);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(RStack stack) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(stack);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(RStack stack) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(stack);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(RStack stack) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(stack);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(RStack stack) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(stack);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(RStack stack) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(stack);
        return (binaryTreeGrammarRule_);
    }
}
