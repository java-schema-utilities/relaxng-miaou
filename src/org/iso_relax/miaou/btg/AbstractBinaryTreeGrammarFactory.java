package org.iso_relax.miaou.btg;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractBinaryTreeGrammarFactory is generated by Relaxer based on binaryTreeGrammar.rng.
 *
 * @version binaryTreeGrammar.rng 1.0 (Sat Sep 07 19:30:34 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public abstract class AbstractBinaryTreeGrammarFactory implements IBinaryTreeGrammarFactory {
    protected static org.xml.sax.ErrorHandler errorHandler;

    /**
     * Sets a error handler to handle parsing error.
     *
     * @param handler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler handler) {
        errorHandler = handler;
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(file, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(file);
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(uri, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(uri);
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(url, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(url);
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(in, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(in);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(is, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(is);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(reader, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(reader);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (BinaryTreeGrammar.isMatch(element)) {
            BinaryTreeGrammar node = createBinaryTreeGrammar();
            node.setup(element);
            return(node);
        } else if (BinaryTreeGrammarStart.isMatch(element)) {
            BinaryTreeGrammarStart node = createBinaryTreeGrammarStart();
            node.setup(element);
            return(node);
        } else if (BtrExpElement.isMatch(element)) {
            BtrExpElement node = createBtrExpElement();
            node.setup(element);
            return(node);
        } else if (NameClassNsName.isMatch(element)) {
            NameClassNsName node = createNameClassNsName();
            node.setup(element);
            return(node);
        } else if (ExceptNameClass.isMatch(element)) {
            ExceptNameClass node = createExceptNameClass();
            node.setup(element);
            return(node);
        } else if (NameClassChoice.isMatch(element)) {
            NameClassChoice node = createNameClassChoice();
            node.setup(element);
            return(node);
        } else if (NameClassAnyName.isMatch(element)) {
            NameClassAnyName node = createNameClassAnyName();
            node.setup(element);
            return(node);
        } else if (NameClassName.isMatch(element)) {
            NameClassName node = createNameClassName();
            node.setup(element);
            return(node);
        } else if (BtrExpOneOrMoreAttribute.isMatch(element)) {
            BtrExpOneOrMoreAttribute node = createBtrExpOneOrMoreAttribute();
            node.setup(element);
            return(node);
        } else if (BtrExpNonExistentAttribute.isMatch(element)) {
            BtrExpNonExistentAttribute node = createBtrExpNonExistentAttribute();
            node.setup(element);
            return(node);
        } else if (BtrExpInterleave.isMatch(element)) {
            BtrExpInterleave node = createBtrExpInterleave();
            node.setup(element);
            return(node);
        } else if (BtrExpAtomic.isMatch(element)) {
            BtrExpAtomic node = createBtrExpAtomic();
            node.setup(element);
            return(node);
        } else if (Data.isMatch(element)) {
            Data node = createData();
            node.setup(element);
            return(node);
        } else if (Param.isMatch(element)) {
            Param node = createParam();
            node.setup(element);
            return(node);
        } else if (Value.isMatch(element)) {
            Value node = createValue();
            node.setup(element);
            return(node);
        } else if (BtrExpList.isMatch(element)) {
            BtrExpList node = createBtrExpList();
            node.setup(element);
            return(node);
        } else if (BtrExpChoice.isMatch(element)) {
            BtrExpChoice node = createBtrExpChoice();
            node.setup(element);
            return(node);
        } else if (BtrExpProduct.isMatch(element)) {
            BtrExpProduct node = createBtrExpProduct();
            node.setup(element);
            return(node);
        } else if (BtrExpRef.isMatch(element)) {
            BtrExpRef node = createBtrExpRef();
            node.setup(element);
            return(node);
        } else if (BtrExpText.isMatch(element)) {
            BtrExpText node = createBtrExpText();
            node.setup(element);
            return(node);
        } else if (BtrExpOneOrMore.isMatch(element)) {
            BtrExpOneOrMore node = createBtrExpOneOrMore();
            node.setup(element);
            return(node);
        } else if (BtrExpNotAllowed.isMatch(element)) {
            BtrExpNotAllowed node = createBtrExpNotAllowed();
            node.setup(element);
            return(node);
        } else if (BtrExpEnd.isMatch(element)) {
            BtrExpEnd node = createBtrExpEnd();
            node.setup(element);
            return(node);
        } else if (BtrExpVariable.isMatch(element)) {
            BtrExpVariable node = createBtrExpVariable();
            node.setup(element);
            return(node);
        } else if (BinaryTreeGrammarRule.isMatch(element)) {
            BinaryTreeGrammarRule node = createBinaryTreeGrammarRule();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Element element) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(element);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(File file) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(file, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(File file) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(file, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(file, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(File file) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(file, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(file, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        binaryTreeGrammar_.setup(file);
        binaryTreeGrammar_.setRContext(rContext);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        binaryTreeGrammarStart_.setup(file);
        binaryTreeGrammarStart_.setRContext(rContext);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpElement_.setup(file);
        btrExpElement_.setRContext(rContext);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassNsName_.setup(file);
        nameClassNsName_.setRContext(rContext);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        exceptNameClass_.setup(file);
        exceptNameClass_.setRContext(rContext);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassChoice_.setup(file);
        nameClassChoice_.setRContext(rContext);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassAnyName_.setup(file);
        nameClassAnyName_.setRContext(rContext);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassName_.setup(file);
        nameClassName_.setRContext(rContext);
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpOneOrMoreAttribute_.setup(file);
        btrExpOneOrMoreAttribute_.setRContext(rContext);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpNonExistentAttribute_.setup(file);
        btrExpNonExistentAttribute_.setRContext(rContext);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpInterleave_.setup(file);
        btrExpInterleave_.setRContext(rContext);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpAtomic_.setup(file);
        btrExpAtomic_.setRContext(rContext);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        data_.setup(file);
        data_.setRContext(rContext);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        param_.setup(file);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        value_.setup(file);
        value_.setRContext(rContext);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpList_.setup(file);
        btrExpList_.setRContext(rContext);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpChoice_.setup(file);
        btrExpChoice_.setRContext(rContext);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpProduct_.setup(file);
        btrExpProduct_.setRContext(rContext);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpRef_.setup(file);
        btrExpRef_.setRContext(rContext);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpText_.setup(file);
        btrExpText_.setRContext(rContext);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpOneOrMore_.setup(file);
        btrExpOneOrMore_.setRContext(rContext);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpNotAllowed_.setup(file);
        btrExpNotAllowed_.setRContext(rContext);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpEnd_.setup(file);
        btrExpEnd_.setRContext(rContext);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        btrExpVariable_.setup(file);
        btrExpVariable_.setRContext(rContext);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        binaryTreeGrammarRule_.setup(file);
        binaryTreeGrammarRule_.setRContext(rContext);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(String uri) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(uri, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(String uri) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(uri, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(uri, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(String uri) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(uri, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(uri, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        binaryTreeGrammar_.setup(uri);
        binaryTreeGrammar_.setRContext(rContext);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        binaryTreeGrammarStart_.setup(uri);
        binaryTreeGrammarStart_.setRContext(rContext);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpElement_.setup(uri);
        btrExpElement_.setRContext(rContext);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        nameClassNsName_.setup(uri);
        nameClassNsName_.setRContext(rContext);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        exceptNameClass_.setup(uri);
        exceptNameClass_.setRContext(rContext);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        nameClassChoice_.setup(uri);
        nameClassChoice_.setRContext(rContext);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        nameClassAnyName_.setup(uri);
        nameClassAnyName_.setRContext(rContext);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        nameClassName_.setup(uri);
        nameClassName_.setRContext(rContext);
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpOneOrMoreAttribute_.setup(uri);
        btrExpOneOrMoreAttribute_.setRContext(rContext);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpNonExistentAttribute_.setup(uri);
        btrExpNonExistentAttribute_.setRContext(rContext);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpInterleave_.setup(uri);
        btrExpInterleave_.setRContext(rContext);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpAtomic_.setup(uri);
        btrExpAtomic_.setRContext(rContext);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        data_.setup(uri);
        data_.setRContext(rContext);
        return (data_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        param_.setup(uri);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>Value</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        value_.setup(uri);
        value_.setRContext(rContext);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpList_.setup(uri);
        btrExpList_.setRContext(rContext);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpChoice_.setup(uri);
        btrExpChoice_.setRContext(rContext);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpProduct_.setup(uri);
        btrExpProduct_.setRContext(rContext);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpRef_.setup(uri);
        btrExpRef_.setRContext(rContext);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpText_.setup(uri);
        btrExpText_.setRContext(rContext);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpOneOrMore_.setup(uri);
        btrExpOneOrMore_.setRContext(rContext);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpNotAllowed_.setup(uri);
        btrExpNotAllowed_.setRContext(rContext);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpEnd_.setup(uri);
        btrExpEnd_.setRContext(rContext);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        btrExpVariable_.setup(uri);
        btrExpVariable_.setRContext(rContext);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        RContext rContext = createRContext();
        rContext.setBaseURL(new URL(uri));
        binaryTreeGrammarRule_.setup(uri);
        binaryTreeGrammarRule_.setRContext(rContext);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(URL url) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(url, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(URL url) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(url, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(url, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(URL url) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(url, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(url, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        binaryTreeGrammar_.setup(url);
        binaryTreeGrammar_.setRContext(rContext);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        binaryTreeGrammarStart_.setup(url);
        binaryTreeGrammarStart_.setRContext(rContext);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpElement_.setup(url);
        btrExpElement_.setRContext(rContext);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassNsName_.setup(url);
        nameClassNsName_.setRContext(rContext);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        exceptNameClass_.setup(url);
        exceptNameClass_.setRContext(rContext);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassChoice_.setup(url);
        nameClassChoice_.setRContext(rContext);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassAnyName_.setup(url);
        nameClassAnyName_.setRContext(rContext);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassName_.setup(url);
        nameClassName_.setRContext(rContext);
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpOneOrMoreAttribute_.setup(url);
        btrExpOneOrMoreAttribute_.setRContext(rContext);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpNonExistentAttribute_.setup(url);
        btrExpNonExistentAttribute_.setRContext(rContext);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpInterleave_.setup(url);
        btrExpInterleave_.setRContext(rContext);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpAtomic_.setup(url);
        btrExpAtomic_.setRContext(rContext);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        data_.setup(url);
        data_.setRContext(rContext);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        param_.setup(url);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        value_.setup(url);
        value_.setRContext(rContext);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpList_.setup(url);
        btrExpList_.setRContext(rContext);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpChoice_.setup(url);
        btrExpChoice_.setRContext(rContext);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpProduct_.setup(url);
        btrExpProduct_.setRContext(rContext);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpRef_.setup(url);
        btrExpRef_.setRContext(rContext);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpText_.setup(url);
        btrExpText_.setRContext(rContext);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpOneOrMore_.setup(url);
        btrExpOneOrMore_.setRContext(rContext);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpNotAllowed_.setup(url);
        btrExpNotAllowed_.setRContext(rContext);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpEnd_.setup(url);
        btrExpEnd_.setRContext(rContext);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        btrExpVariable_.setup(url);
        btrExpVariable_.setRContext(rContext);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        binaryTreeGrammarRule_.setup(url);
        binaryTreeGrammarRule_.setRContext(rContext);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(in, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(in, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(in, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(in, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(in, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar(in);
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart(in);
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement(in);
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName(in);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(in);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice(in);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(in);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName(in);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute(in);
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute(in);
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave(in);
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic(in);
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData(in);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(in);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue(in);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList(in);
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice(in);
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct(in);
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef(in);
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText(in);
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore(in);
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed(in);
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd(in);
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable(in);
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule(in);
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(is, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(is, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(is, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(is, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(is, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar(is);
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart(is);
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement(is);
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName(is);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(is);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice(is);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(is);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName(is);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute(is);
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute(is);
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave(is);
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic(is);
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData(is);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(is);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue(is);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList(is);
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice(is);
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct(is);
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef(is);
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText(is);
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore(is);
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed(is);
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd(is);
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable(is);
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule(is);
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(reader, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(reader, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(reader, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(reader, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(UJAXP.getDocument(reader, errorHandler));
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar(reader);
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart(reader);
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpElement btrExpElement_ = createBtrExpElement(reader);
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName(reader);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(reader);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice(reader);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(reader);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName(reader);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute(reader);
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute(reader);
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave(reader);
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic(reader);
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData(reader);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(reader);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue(reader);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpList btrExpList_ = createBtrExpList(reader);
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice(reader);
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct(reader);
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpRef btrExpRef_ = createBtrExpRef(reader);
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpText btrExpText_ = createBtrExpText(reader);
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore(reader);
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed(reader);
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd(reader);
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable(reader);
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule(reader);
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> with Context.
     *
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext() {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> with Context.
     *
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext() {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> with Context.
     *
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext() {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> with Context.
     *
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext() {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> with Context.
     *
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext() {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> with Context.
     *
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext() {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> with Context.
     *
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext() {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> with Context.
     *
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext() {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> with Context.
     *
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext() {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> with Context.
     *
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext() {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> with Context.
     *
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext() {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> with Context.
     *
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext() {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> with Context.
     *
     * @return Data
     */
    public Data createDataWithContext() {
        Data data_ = createData();
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> with Context.
     *
     * @return Param
     */
    public Param createParamWithContext() {
        Param param_ = createParam();
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> with Context.
     *
     * @return Value
     */
    public Value createValueWithContext() {
        Value value_ = createValue();
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> with Context.
     *
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext() {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> with Context.
     *
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext() {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> with Context.
     *
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext() {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> with Context.
     *
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext() {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> with Context.
     *
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext() {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> with Context.
     *
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext() {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> with Context.
     *
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext() {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> with Context.
     *
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext() {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> with Context.
     *
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext() {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> with Context.
     *
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext() {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(Document doc) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(doc);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(Document doc) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(doc);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(Document doc) {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(doc);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(Document doc) {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(doc);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(Document doc) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(doc);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(Document doc) {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(doc);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(Document doc) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(doc);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassName
     */
    public NameClassName createNameClassName(Document doc) {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(doc);
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Document doc) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(doc);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Document doc) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(doc);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(Document doc) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(doc);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(Document doc) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(doc);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Data
     */
    public Data createData(Document doc) {
        Data data_ = createData();
        data_.setup(doc);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParam(Document doc) {
        Param param_ = createParam();
        param_.setup(doc);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Value
     */
    public Value createValue(Document doc) {
        Value value_ = createValue();
        value_.setup(doc);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(Document doc) {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(doc);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(Document doc) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(doc);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(Document doc) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(doc);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(Document doc) {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(doc);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(Document doc) {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(doc);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(Document doc) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(doc);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(Document doc) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(doc);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(Document doc) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(doc);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(Document doc) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(doc);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(Document doc) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(doc);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(Document doc) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar(doc);
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(Document doc) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart(doc);
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(Document doc) {
        BtrExpElement btrExpElement_ = createBtrExpElement(doc);
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(Document doc) {
        NameClassNsName nameClassNsName_ = createNameClassNsName(doc);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(Document doc) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(doc);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(Document doc) {
        NameClassChoice nameClassChoice_ = createNameClassChoice(doc);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(Document doc) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(doc);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(Document doc) {
        NameClassName nameClassName_ = createNameClassName(doc);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(Document doc) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute(doc);
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(Document doc) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute(doc);
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(Document doc) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave(doc);
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(Document doc) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic(doc);
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Data
     */
    public Data createDataWithContext(Document doc) {
        Data data_ = createData(doc);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParamWithContext(Document doc) {
        Param param_ = createParam(doc);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Value
     */
    public Value createValueWithContext(Document doc) {
        Value value_ = createValue(doc);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(Document doc) {
        BtrExpList btrExpList_ = createBtrExpList(doc);
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(Document doc) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice(doc);
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(Document doc) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct(doc);
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(Document doc) {
        BtrExpRef btrExpRef_ = createBtrExpRef(doc);
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(Document doc) {
        BtrExpText btrExpText_ = createBtrExpText(doc);
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(Document doc) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore(doc);
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(Document doc) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed(doc);
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(Document doc) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd(doc);
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(Document doc) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable(doc);
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(Document doc) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule(doc);
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(Element element) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(element);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(Element element) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(element);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(Element element) {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(element);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(Element element) {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(element);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(Element element) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(element);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(Element element) {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(element);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(Element element) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(element);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassName
     */
    public NameClassName createNameClassName(Element element) {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(element);
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Element element) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(element);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Element element) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(element);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(Element element) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(element);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(Element element) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(element);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Data
     */
    public Data createData(Element element) {
        Data data_ = createData();
        data_.setup(element);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParam(Element element) {
        Param param_ = createParam();
        param_.setup(element);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Value
     */
    public Value createValue(Element element) {
        Value value_ = createValue();
        value_.setup(element);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(Element element) {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(element);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(Element element) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(element);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(Element element) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(element);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(Element element) {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(element);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(Element element) {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(element);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(Element element) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(element);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(Element element) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(element);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(Element element) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(element);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(Element element) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(element);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(Element element) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(element);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(Element element) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar(element);
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(Element element) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart(element);
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(Element element) {
        BtrExpElement btrExpElement_ = createBtrExpElement(element);
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(Element element) {
        NameClassNsName nameClassNsName_ = createNameClassNsName(element);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(Element element) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(element);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(Element element) {
        NameClassChoice nameClassChoice_ = createNameClassChoice(element);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(Element element) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(element);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(Element element) {
        NameClassName nameClassName_ = createNameClassName(element);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(Element element) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute(element);
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(Element element) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute(element);
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(Element element) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave(element);
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(Element element) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic(element);
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Data
     */
    public Data createDataWithContext(Element element) {
        Data data_ = createData(element);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParamWithContext(Element element) {
        Param param_ = createParam(element);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Value
     */
    public Value createValueWithContext(Element element) {
        Value value_ = createValue(element);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(Element element) {
        BtrExpList btrExpList_ = createBtrExpList(element);
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(Element element) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice(element);
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(Element element) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct(element);
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(Element element) {
        BtrExpRef btrExpRef_ = createBtrExpRef(element);
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(Element element) {
        BtrExpText btrExpText_ = createBtrExpText(element);
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(Element element) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore(element);
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(Element element) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed(element);
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(Element element) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd(element);
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(Element element) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable(element);
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(Element element) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule(element);
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar(RStack stack) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar();
        binaryTreeGrammar_.setup(stack);
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart(RStack stack) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart();
        binaryTreeGrammarStart_.setup(stack);
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement(RStack stack) {
        BtrExpElement btrExpElement_ = createBtrExpElement();
        btrExpElement_.setup(stack);
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(RStack stack) {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(stack);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(RStack stack) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(stack);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(RStack stack) {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(stack);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(RStack stack) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(stack);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassName
     */
    public NameClassName createNameClassName(RStack stack) {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(stack);
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(RStack stack) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute();
        btrExpOneOrMoreAttribute_.setup(stack);
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(RStack stack) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute();
        btrExpNonExistentAttribute_.setup(stack);
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave(RStack stack) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave();
        btrExpInterleave_.setup(stack);
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic(RStack stack) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic();
        btrExpAtomic_.setup(stack);
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Data
     */
    public Data createData(RStack stack) {
        Data data_ = createData();
        data_.setup(stack);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParam(RStack stack) {
        Param param_ = createParam();
        param_.setup(stack);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Value
     */
    public Value createValue(RStack stack) {
        Value value_ = createValue();
        value_.setup(stack);
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList(RStack stack) {
        BtrExpList btrExpList_ = createBtrExpList();
        btrExpList_.setup(stack);
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice(RStack stack) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice();
        btrExpChoice_.setup(stack);
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct(RStack stack) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct();
        btrExpProduct_.setup(stack);
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef(RStack stack) {
        BtrExpRef btrExpRef_ = createBtrExpRef();
        btrExpRef_.setup(stack);
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText(RStack stack) {
        BtrExpText btrExpText_ = createBtrExpText();
        btrExpText_.setup(stack);
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore(RStack stack) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore();
        btrExpOneOrMore_.setup(stack);
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed(RStack stack) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed();
        btrExpNotAllowed_.setup(stack);
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd(RStack stack) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd();
        btrExpEnd_.setup(stack);
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable(RStack stack) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable();
        btrExpVariable_.setup(stack);
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule(RStack stack) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule();
        binaryTreeGrammarRule_.setup(stack);
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammarWithContext(RStack stack) {
        BinaryTreeGrammar binaryTreeGrammar_ = createBinaryTreeGrammar(stack);
        binaryTreeGrammar_.setRContext(createRContext());
        return (binaryTreeGrammar_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStartWithContext(RStack stack) {
        BinaryTreeGrammarStart binaryTreeGrammarStart_ = createBinaryTreeGrammarStart(stack);
        binaryTreeGrammarStart_.setRContext(createRContext());
        return (binaryTreeGrammarStart_);
    }

    /**
     * Creates a <code>BtrExpElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElementWithContext(RStack stack) {
        BtrExpElement btrExpElement_ = createBtrExpElement(stack);
        btrExpElement_.setRContext(createRContext());
        return (btrExpElement_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(RStack stack) {
        NameClassNsName nameClassNsName_ = createNameClassNsName(stack);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(RStack stack) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(stack);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(RStack stack) {
        NameClassChoice nameClassChoice_ = createNameClassChoice(stack);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(RStack stack) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(stack);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(RStack stack) {
        NameClassName nameClassName_ = createNameClassName(stack);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttributeWithContext(RStack stack) {
        BtrExpOneOrMoreAttribute btrExpOneOrMoreAttribute_ = createBtrExpOneOrMoreAttribute(stack);
        btrExpOneOrMoreAttribute_.setRContext(createRContext());
        return (btrExpOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttributeWithContext(RStack stack) {
        BtrExpNonExistentAttribute btrExpNonExistentAttribute_ = createBtrExpNonExistentAttribute(stack);
        btrExpNonExistentAttribute_.setRContext(createRContext());
        return (btrExpNonExistentAttribute_);
    }

    /**
     * Creates a <code>BtrExpInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleaveWithContext(RStack stack) {
        BtrExpInterleave btrExpInterleave_ = createBtrExpInterleave(stack);
        btrExpInterleave_.setRContext(createRContext());
        return (btrExpInterleave_);
    }

    /**
     * Creates a <code>BtrExpAtomic</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomicWithContext(RStack stack) {
        BtrExpAtomic btrExpAtomic_ = createBtrExpAtomic(stack);
        btrExpAtomic_.setRContext(createRContext());
        return (btrExpAtomic_);
    }

    /**
     * Creates a <code>Data</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Data
     */
    public Data createDataWithContext(RStack stack) {
        Data data_ = createData(stack);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParamWithContext(RStack stack) {
        Param param_ = createParam(stack);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Value
     */
    public Value createValueWithContext(RStack stack) {
        Value value_ = createValue(stack);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>BtrExpList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpList
     */
    public BtrExpList createBtrExpListWithContext(RStack stack) {
        BtrExpList btrExpList_ = createBtrExpList(stack);
        btrExpList_.setRContext(createRContext());
        return (btrExpList_);
    }

    /**
     * Creates a <code>BtrExpChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoiceWithContext(RStack stack) {
        BtrExpChoice btrExpChoice_ = createBtrExpChoice(stack);
        btrExpChoice_.setRContext(createRContext());
        return (btrExpChoice_);
    }

    /**
     * Creates a <code>BtrExpProduct</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProductWithContext(RStack stack) {
        BtrExpProduct btrExpProduct_ = createBtrExpProduct(stack);
        btrExpProduct_.setRContext(createRContext());
        return (btrExpProduct_);
    }

    /**
     * Creates a <code>BtrExpRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRefWithContext(RStack stack) {
        BtrExpRef btrExpRef_ = createBtrExpRef(stack);
        btrExpRef_.setRContext(createRContext());
        return (btrExpRef_);
    }

    /**
     * Creates a <code>BtrExpText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpText
     */
    public BtrExpText createBtrExpTextWithContext(RStack stack) {
        BtrExpText btrExpText_ = createBtrExpText(stack);
        btrExpText_.setRContext(createRContext());
        return (btrExpText_);
    }

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMoreWithContext(RStack stack) {
        BtrExpOneOrMore btrExpOneOrMore_ = createBtrExpOneOrMore(stack);
        btrExpOneOrMore_.setRContext(createRContext());
        return (btrExpOneOrMore_);
    }

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowedWithContext(RStack stack) {
        BtrExpNotAllowed btrExpNotAllowed_ = createBtrExpNotAllowed(stack);
        btrExpNotAllowed_.setRContext(createRContext());
        return (btrExpNotAllowed_);
    }

    /**
     * Creates a <code>BtrExpEnd</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEndWithContext(RStack stack) {
        BtrExpEnd btrExpEnd_ = createBtrExpEnd(stack);
        btrExpEnd_.setRContext(createRContext());
        return (btrExpEnd_);
    }

    /**
     * Creates a <code>BtrExpVariable</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariableWithContext(RStack stack) {
        BtrExpVariable btrExpVariable_ = createBtrExpVariable(stack);
        btrExpVariable_.setRContext(createRContext());
        return (btrExpVariable_);
    }

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRuleWithContext(RStack stack) {
        BinaryTreeGrammarRule binaryTreeGrammarRule_ = createBinaryTreeGrammarRule(stack);
        binaryTreeGrammarRule_.setRContext(createRContext());
        return (binaryTreeGrammarRule_);
    }

    /**
     * Creates a default <code>RContext</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return RContext
     */
    public RContext createRContext() {
        return (new RContext());
    }
}
