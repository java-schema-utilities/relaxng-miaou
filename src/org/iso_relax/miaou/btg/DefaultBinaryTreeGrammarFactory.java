package org.iso_relax.miaou.btg;

import org.w3c.dom.*;

/**
 * DefaultBinaryTreeGrammarFactory is generated by Relaxer based on binaryTreeGrammar.rng.
 *
 * @version binaryTreeGrammar.rng 1.0 (Sat Oct 19 02:26:54 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public class DefaultBinaryTreeGrammarFactory extends AbstractBinaryTreeGrammarFactory {

    /**
     * Creates a default <code>BinaryTreeGrammar</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BinaryTreeGrammar
     */
    public BinaryTreeGrammar createBinaryTreeGrammar() {
        return (new BinaryTreeGrammar());
    }

    /**
     * Creates a default <code>BinaryTreeGrammarStart</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BinaryTreeGrammarStart
     */
    public BinaryTreeGrammarStart createBinaryTreeGrammarStart() {
        return (new BinaryTreeGrammarStart());
    }

    /**
     * Creates a default <code>BtrExpElement</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpElement
     */
    public BtrExpElement createBtrExpElement() {
        return (new BtrExpElement());
    }

    /**
     * Creates a default <code>BtrExpOneOrMoreAttribute</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpOneOrMoreAttribute
     */
    public BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute() {
        return (new BtrExpOneOrMoreAttribute());
    }

    /**
     * Creates a default <code>BtrExpNonExistentAttribute</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpNonExistentAttribute
     */
    public BtrExpNonExistentAttribute createBtrExpNonExistentAttribute() {
        return (new BtrExpNonExistentAttribute());
    }

    /**
     * Creates a default <code>BtrExpInterleave</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpInterleave
     */
    public BtrExpInterleave createBtrExpInterleave() {
        return (new BtrExpInterleave());
    }

    /**
     * Creates a default <code>BtrExpAtomic</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpAtomic
     */
    public BtrExpAtomic createBtrExpAtomic() {
        return (new BtrExpAtomic());
    }

    /**
     * Creates a default <code>Data</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return Data
     */
    public Data createData() {
        return (new Data());
    }

    /**
     * Creates a default <code>Param</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return Param
     */
    public Param createParam() {
        return (new Param());
    }

    /**
     * Creates a default <code>Value</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return Value
     */
    public Value createValue() {
        return (new Value());
    }

    /**
     * Creates a default <code>BtrExpList</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpList
     */
    public BtrExpList createBtrExpList() {
        return (new BtrExpList());
    }

    /**
     * Creates a default <code>BtrExpChoice</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpChoice
     */
    public BtrExpChoice createBtrExpChoice() {
        return (new BtrExpChoice());
    }

    /**
     * Creates a default <code>BtrExpProduct</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpProduct
     */
    public BtrExpProduct createBtrExpProduct() {
        return (new BtrExpProduct());
    }

    /**
     * Creates a default <code>BtrExpRef</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpRef
     */
    public BtrExpRef createBtrExpRef() {
        return (new BtrExpRef());
    }

    /**
     * Creates a default <code>BtrExpText</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpText
     */
    public BtrExpText createBtrExpText() {
        return (new BtrExpText());
    }

    /**
     * Creates a default <code>BtrExpOneOrMore</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpOneOrMore
     */
    public BtrExpOneOrMore createBtrExpOneOrMore() {
        return (new BtrExpOneOrMore());
    }

    /**
     * Creates a default <code>BtrExpNotAllowed</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpNotAllowed
     */
    public BtrExpNotAllowed createBtrExpNotAllowed() {
        return (new BtrExpNotAllowed());
    }

    /**
     * Creates a default <code>BtrExpEnd</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpEnd
     */
    public BtrExpEnd createBtrExpEnd() {
        return (new BtrExpEnd());
    }

    /**
     * Creates a default <code>BtrExpVariable</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BtrExpVariable
     */
    public BtrExpVariable createBtrExpVariable() {
        return (new BtrExpVariable());
    }

    /**
     * Creates a default <code>BinaryTreeGrammarRule</code>.
     * This method is a hook method of the AbstractBinaryTreeGrammarFactory.
     *
     * @return BinaryTreeGrammarRule
     */
    public BinaryTreeGrammarRule createBinaryTreeGrammarRule() {
        return (new BinaryTreeGrammarRule());
    }
}
