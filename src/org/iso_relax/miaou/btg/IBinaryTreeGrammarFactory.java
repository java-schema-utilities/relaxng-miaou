package org.iso_relax.miaou.btg;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * IBinaryTreeGrammarFactory is generated by Relaxer based on binaryTreeGrammar.rng.
 *
 * @version binaryTreeGrammar.rng 1.0 (Sat Oct 19 02:26:54 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public interface IBinaryTreeGrammarFactory {
    /**
     * Sets a error handler to handle parsing error.
     *
     * @param handler
     */
    void setErrorHandler(org.xml.sax.ErrorHandler handler);

    /**
     * Gets a error handler to handle parsing error.
     *
     * @return org.xml.sax.ErrorHandler
     */
    org.xml.sax.ErrorHandler getErrorHandler();

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Document <code>dom</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(Document doc) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    Object create(Element element) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpElement</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpInterleave</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpAtomic</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Data</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    Data createData(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Value</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    Value createValue(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpList</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpChoice</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpProduct</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpText</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpEnd</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpVariable</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpElement</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpInterleave</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpAtomic</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Data</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    Data createData(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Value</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    Value createValue(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpList</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpChoice</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpProduct</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpText</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpEnd</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpVariable</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarRule</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpElement</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpInterleave</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpAtomic</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Data</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    Data createData(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Value</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    Value createValue(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpList</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpChoice</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpProduct</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpText</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpEnd</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpVariable</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpElement</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Data</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    Data createData(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Value</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    Value createValue(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpList</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpChoice</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpProduct</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpText</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpEnd</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpVariable</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpElement</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpInterleave</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpAtomic</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Data</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    Data createData(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Value</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    Value createValue(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpList</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpChoice</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpProduct</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpText</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpEnd</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpVariable</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpElement</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpInterleave</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpAtomic</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Data</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    Data createData(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Value</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    Value createValue(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpList</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpChoice</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpProduct</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpText</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpEnd</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BtrExpVariable</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>BinaryTreeGrammar</code>.
     *
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar();

    /**
     * Creates a <code>BinaryTreeGrammarStart</code>.
     *
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart();

    /**
     * Creates a <code>BtrExpElement</code>.
     *
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement();

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code>.
     *
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute();

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code>.
     *
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute();

    /**
     * Creates a <code>BtrExpInterleave</code>.
     *
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave();

    /**
     * Creates a <code>BtrExpAtomic</code>.
     *
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic();

    /**
     * Creates a <code>Data</code>.
     *
     * @return Data
     */
    Data createData();

    /**
     * Creates a <code>Param</code>.
     *
     * @return Param
     */
    Param createParam();

    /**
     * Creates a <code>Value</code>.
     *
     * @return Value
     */
    Value createValue();

    /**
     * Creates a <code>BtrExpList</code>.
     *
     * @return BtrExpList
     */
    BtrExpList createBtrExpList();

    /**
     * Creates a <code>BtrExpChoice</code>.
     *
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice();

    /**
     * Creates a <code>BtrExpProduct</code>.
     *
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct();

    /**
     * Creates a <code>BtrExpRef</code>.
     *
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef();

    /**
     * Creates a <code>BtrExpText</code>.
     *
     * @return BtrExpText
     */
    BtrExpText createBtrExpText();

    /**
     * Creates a <code>BtrExpOneOrMore</code>.
     *
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore();

    /**
     * Creates a <code>BtrExpNotAllowed</code>.
     *
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed();

    /**
     * Creates a <code>BtrExpEnd</code>.
     *
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd();

    /**
     * Creates a <code>BtrExpVariable</code>.
     *
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable();

    /**
     * Creates a <code>BinaryTreeGrammarRule</code>.
     *
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule();

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(Document doc);

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(Document doc);

    /**
     * Creates a <code>BtrExpElement</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(Document doc);

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Document doc);

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Document doc);

    /**
     * Creates a <code>BtrExpInterleave</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(Document doc);

    /**
     * Creates a <code>BtrExpAtomic</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(Document doc);

    /**
     * Creates a <code>Data</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Data
     */
    Data createData(Document doc);

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Param
     */
    Param createParam(Document doc);

    /**
     * Creates a <code>Value</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Value
     */
    Value createValue(Document doc);

    /**
     * Creates a <code>BtrExpList</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(Document doc);

    /**
     * Creates a <code>BtrExpChoice</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(Document doc);

    /**
     * Creates a <code>BtrExpProduct</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(Document doc);

    /**
     * Creates a <code>BtrExpRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(Document doc);

    /**
     * Creates a <code>BtrExpText</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(Document doc);

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(Document doc);

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(Document doc);

    /**
     * Creates a <code>BtrExpEnd</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(Document doc);

    /**
     * Creates a <code>BtrExpVariable</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(Document doc);

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(Document doc);

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(Element element);

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(Element element);

    /**
     * Creates a <code>BtrExpElement</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(Element element);

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(Element element);

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(Element element);

    /**
     * Creates a <code>BtrExpInterleave</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(Element element);

    /**
     * Creates a <code>BtrExpAtomic</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(Element element);

    /**
     * Creates a <code>Data</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Data
     */
    Data createData(Element element);

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Param
     */
    Param createParam(Element element);

    /**
     * Creates a <code>Value</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Value
     */
    Value createValue(Element element);

    /**
     * Creates a <code>BtrExpList</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(Element element);

    /**
     * Creates a <code>BtrExpChoice</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(Element element);

    /**
     * Creates a <code>BtrExpProduct</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(Element element);

    /**
     * Creates a <code>BtrExpRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(Element element);

    /**
     * Creates a <code>BtrExpText</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(Element element);

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(Element element);

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(Element element);

    /**
     * Creates a <code>BtrExpEnd</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(Element element);

    /**
     * Creates a <code>BtrExpVariable</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(Element element);

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Element <code>element</code>.
     *
     * @param element
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(Element element);

    /**
     * Creates a <code>BinaryTreeGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BinaryTreeGrammar
     */
    BinaryTreeGrammar createBinaryTreeGrammar(RStack stack);

    /**
     * Creates a <code>BinaryTreeGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BinaryTreeGrammarStart
     */
    BinaryTreeGrammarStart createBinaryTreeGrammarStart(RStack stack);

    /**
     * Creates a <code>BtrExpElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpElement
     */
    BtrExpElement createBtrExpElement(RStack stack);

    /**
     * Creates a <code>BtrExpOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpOneOrMoreAttribute
     */
    BtrExpOneOrMoreAttribute createBtrExpOneOrMoreAttribute(RStack stack);

    /**
     * Creates a <code>BtrExpNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpNonExistentAttribute
     */
    BtrExpNonExistentAttribute createBtrExpNonExistentAttribute(RStack stack);

    /**
     * Creates a <code>BtrExpInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpInterleave
     */
    BtrExpInterleave createBtrExpInterleave(RStack stack);

    /**
     * Creates a <code>BtrExpAtomic</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpAtomic
     */
    BtrExpAtomic createBtrExpAtomic(RStack stack);

    /**
     * Creates a <code>Data</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Data
     */
    Data createData(RStack stack);

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Param
     */
    Param createParam(RStack stack);

    /**
     * Creates a <code>Value</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Value
     */
    Value createValue(RStack stack);

    /**
     * Creates a <code>BtrExpList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpList
     */
    BtrExpList createBtrExpList(RStack stack);

    /**
     * Creates a <code>BtrExpChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpChoice
     */
    BtrExpChoice createBtrExpChoice(RStack stack);

    /**
     * Creates a <code>BtrExpProduct</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpProduct
     */
    BtrExpProduct createBtrExpProduct(RStack stack);

    /**
     * Creates a <code>BtrExpRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpRef
     */
    BtrExpRef createBtrExpRef(RStack stack);

    /**
     * Creates a <code>BtrExpText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpText
     */
    BtrExpText createBtrExpText(RStack stack);

    /**
     * Creates a <code>BtrExpOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpOneOrMore
     */
    BtrExpOneOrMore createBtrExpOneOrMore(RStack stack);

    /**
     * Creates a <code>BtrExpNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpNotAllowed
     */
    BtrExpNotAllowed createBtrExpNotAllowed(RStack stack);

    /**
     * Creates a <code>BtrExpEnd</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpEnd
     */
    BtrExpEnd createBtrExpEnd(RStack stack);

    /**
     * Creates a <code>BtrExpVariable</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BtrExpVariable
     */
    BtrExpVariable createBtrExpVariable(RStack stack);

    /**
     * Creates a <code>BinaryTreeGrammarRule</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return BinaryTreeGrammarRule
     */
    BinaryTreeGrammarRule createBinaryTreeGrammarRule(RStack stack);
}
