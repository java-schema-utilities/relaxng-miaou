package org.iso_relax.miaou.ss;

import org.w3c.dom.*;

/**
 * DefaultSimpleSyntaxFactory is generated by Relaxer based on simpleSyntax.rng.
 *
 * @version simpleSyntax.rng 1.0 (Sat Sep 07 19:36:09 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public class DefaultSimpleSyntaxFactory extends AbstractSimpleSyntaxFactory {

    /**
     * Creates a default <code>NameClassNsName</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName() {
        return (new NameClassNsName());
    }

    /**
     * Creates a default <code>ExceptNameClass</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass() {
        return (new ExceptNameClass());
    }

    /**
     * Creates a default <code>NameClassChoice</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice() {
        return (new NameClassChoice());
    }

    /**
     * Creates a default <code>NameClassAnyName</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName() {
        return (new NameClassAnyName());
    }

    /**
     * Creates a default <code>NameClassName</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return NameClassName
     */
    public NameClassName createNameClassName() {
        return (new NameClassName());
    }

    /**
     * Creates a default <code>PatternData</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternData
     */
    public PatternData createPatternData() {
        return (new PatternData());
    }

    /**
     * Creates a default <code>Param</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return Param
     */
    public Param createParam() {
        return (new Param());
    }

    /**
     * Creates a default <code>ExceptPattern</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern() {
        return (new ExceptPattern());
    }

    /**
     * Creates a default <code>PatternAttribute</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute() {
        return (new PatternAttribute());
    }

    /**
     * Creates a default <code>PatternOneOrMoreAttribute</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute() {
        return (new PatternOneOrMoreAttribute());
    }

    /**
     * Creates a default <code>PatternNonExistentAttribute</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute() {
        return (new PatternNonExistentAttribute());
    }

    /**
     * Creates a default <code>PatternChoice</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice() {
        return (new PatternChoice());
    }

    /**
     * Creates a default <code>PatternGroup</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup() {
        return (new PatternGroup());
    }

    /**
     * Creates a default <code>PatternInterleave</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave() {
        return (new PatternInterleave());
    }

    /**
     * Creates a default <code>PatternValue</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternValue
     */
    public PatternValue createPatternValue() {
        return (new PatternValue());
    }

    /**
     * Creates a default <code>PatternList</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternList
     */
    public PatternList createPatternList() {
        return (new PatternList());
    }

    /**
     * Creates a default <code>PatternRef</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternRef
     */
    public PatternRef createPatternRef() {
        return (new PatternRef());
    }

    /**
     * Creates a default <code>PatternOneOrMore</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore() {
        return (new PatternOneOrMore());
    }

    /**
     * Creates a default <code>PatternNotAllowed</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed() {
        return (new PatternNotAllowed());
    }

    /**
     * Creates a default <code>PatternEmpty</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty() {
        return (new PatternEmpty());
    }

    /**
     * Creates a default <code>PatternText</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return PatternText
     */
    public PatternText createPatternText() {
        return (new PatternText());
    }

    /**
     * Creates a default <code>RootGrammar</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar() {
        return (new RootGrammar());
    }

    /**
     * Creates a default <code>RootGrammarStart</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart() {
        return (new RootGrammarStart());
    }

    /**
     * Creates a default <code>Define</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return Define
     */
    public Define createDefine() {
        return (new Define());
    }

    /**
     * Creates a default <code>DefineElement</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return DefineElement
     */
    public DefineElement createDefineElement() {
        return (new DefineElement());
    }

    /**
     * Creates a default <code>NameClass</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return NameClass
     */
    public NameClass createNameClass() {
        return (new NameClass());
    }

    /**
     * Creates a default <code>Pattern</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return Pattern
     */
    public Pattern createPattern() {
        return (new Pattern());
    }
}
