package org.iso_relax.miaou.ss;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractSimpleSyntaxFactory is generated by Relaxer based on simpleSyntax.rng.
 *
 * @version simpleSyntax.rng 1.0 (Sat Oct 19 02:27:01 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public abstract class AbstractSimpleSyntaxFactory implements ISimpleSyntaxFactory {
    protected static org.xml.sax.ErrorHandler errorHandler;

    /**
     * Gets a error handler to handle parsing error.
     *
     * @param handler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler handler) {
        errorHandler = handler;
    }

    /**
     * @return org.xml.sax.ErrorHandler
     */
    public org.xml.sax.ErrorHandler getErrorHandler() {
        return (errorHandler);
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(file, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(file);
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(uri, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(uri);
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(url, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(url);
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(in, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(in);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(is, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(is);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(reader, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(reader);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (PatternData.isMatch(element)) {
            PatternData node = createPatternData();
            node.setup(element);
            return(node);
        } else if (Param.isMatch(element)) {
            Param node = createParam();
            node.setup(element);
            return(node);
        } else if (ExceptPattern.isMatch(element)) {
            ExceptPattern node = createExceptPattern();
            node.setup(element);
            return(node);
        } else if (PatternAttribute.isMatch(element)) {
            PatternAttribute node = createPatternAttribute();
            node.setup(element);
            return(node);
        } else if (NameClassNsName.isMatch(element)) {
            NameClassNsName node = createNameClassNsName();
            node.setup(element);
            return(node);
        } else if (ExceptNameClass.isMatch(element)) {
            ExceptNameClass node = createExceptNameClass();
            node.setup(element);
            return(node);
        } else if (NameClassChoice.isMatch(element)) {
            NameClassChoice node = createNameClassChoice();
            node.setup(element);
            return(node);
        } else if (NameClassAnyName.isMatch(element)) {
            NameClassAnyName node = createNameClassAnyName();
            node.setup(element);
            return(node);
        } else if (NameClassName.isMatch(element)) {
            NameClassName node = createNameClassName();
            node.setup(element);
            return(node);
        } else if (PatternOneOrMoreAttribute.isMatch(element)) {
            PatternOneOrMoreAttribute node = createPatternOneOrMoreAttribute();
            node.setup(element);
            return(node);
        } else if (PatternNonExistentAttribute.isMatch(element)) {
            PatternNonExistentAttribute node = createPatternNonExistentAttribute();
            node.setup(element);
            return(node);
        } else if (PatternChoice.isMatch(element)) {
            PatternChoice node = createPatternChoice();
            node.setup(element);
            return(node);
        } else if (PatternGroup.isMatch(element)) {
            PatternGroup node = createPatternGroup();
            node.setup(element);
            return(node);
        } else if (PatternInterleave.isMatch(element)) {
            PatternInterleave node = createPatternInterleave();
            node.setup(element);
            return(node);
        } else if (PatternValue.isMatch(element)) {
            PatternValue node = createPatternValue();
            node.setup(element);
            return(node);
        } else if (PatternList.isMatch(element)) {
            PatternList node = createPatternList();
            node.setup(element);
            return(node);
        } else if (PatternRef.isMatch(element)) {
            PatternRef node = createPatternRef();
            node.setup(element);
            return(node);
        } else if (PatternOneOrMore.isMatch(element)) {
            PatternOneOrMore node = createPatternOneOrMore();
            node.setup(element);
            return(node);
        } else if (PatternNotAllowed.isMatch(element)) {
            PatternNotAllowed node = createPatternNotAllowed();
            node.setup(element);
            return(node);
        } else if (PatternEmpty.isMatch(element)) {
            PatternEmpty node = createPatternEmpty();
            node.setup(element);
            return(node);
        } else if (PatternText.isMatch(element)) {
            PatternText node = createPatternText();
            node.setup(element);
            return(node);
        } else if (RootGrammar.isMatch(element)) {
            RootGrammar node = createRootGrammar();
            node.setup(element);
            return(node);
        } else if (RootGrammarStart.isMatch(element)) {
            RootGrammarStart node = createRootGrammarStart();
            node.setup(element);
            return(node);
        } else if (Define.isMatch(element)) {
            Define node = createDefine();
            node.setup(element);
            return(node);
        } else if (DefineElement.isMatch(element)) {
            DefineElement node = createDefineElement();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Element element) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(element);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>PatternData</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternData(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        patternData_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(file, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(File file) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(UJAXP.getDocument(file, errorHandler));
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(File file) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(file, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(file, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValue(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternList(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        patternList_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRef(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternText(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        patternText_.setup(UJAXP.getDocument(file, errorHandler));
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(File file) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(UJAXP.getDocument(file, errorHandler));
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(File file) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(UJAXP.getDocument(file, errorHandler));
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefine(File file) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        define_.setup(UJAXP.getDocument(file, errorHandler));
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElement(File file) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(UJAXP.getDocument(file, errorHandler));
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternData_.setup(file);
        patternData_.setRContext(rContext);
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        param_.setup(file);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        exceptPattern_.setup(file);
        exceptPattern_.setRContext(rContext);
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternAttribute_.setup(file);
        patternAttribute_.setRContext(rContext);
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassNsName_.setup(file);
        nameClassNsName_.setRContext(rContext);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        exceptNameClass_.setup(file);
        exceptNameClass_.setRContext(rContext);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassChoice_.setup(file);
        nameClassChoice_.setRContext(rContext);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassAnyName_.setup(file);
        nameClassAnyName_.setRContext(rContext);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nameClassName_.setup(file);
        nameClassName_.setRContext(rContext);
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternOneOrMoreAttribute_.setup(file);
        patternOneOrMoreAttribute_.setRContext(rContext);
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternNonExistentAttribute_.setup(file);
        patternNonExistentAttribute_.setRContext(rContext);
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternChoice_.setup(file);
        patternChoice_.setRContext(rContext);
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternGroup_.setup(file);
        patternGroup_.setRContext(rContext);
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternInterleave_.setup(file);
        patternInterleave_.setRContext(rContext);
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternValue_.setup(file);
        patternValue_.setRContext(rContext);
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternListWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternList_.setup(file);
        patternList_.setRContext(rContext);
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternRef_.setup(file);
        patternRef_.setRContext(rContext);
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternOneOrMore_.setup(file);
        patternOneOrMore_.setRContext(rContext);
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternNotAllowed_.setup(file);
        patternNotAllowed_.setRContext(rContext);
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternEmpty_.setup(file);
        patternEmpty_.setRContext(rContext);
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        patternText_.setup(file);
        patternText_.setRContext(rContext);
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        rootGrammar_.setup(file);
        rootGrammar_.setRContext(rContext);
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        rootGrammarStart_.setup(file);
        rootGrammarStart_.setRContext(rContext);
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefineWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        define_.setup(file);
        define_.setRContext(rContext);
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        defineElement_.setup(file);
        defineElement_.setRContext(rContext);
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternData(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        patternData_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(uri, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(String uri) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(UJAXP.getDocument(uri, errorHandler));
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(String uri) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(uri, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValue(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternList(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        patternList_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRef(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternText(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        patternText_.setup(UJAXP.getDocument(uri, errorHandler));
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(UJAXP.getDocument(uri, errorHandler));
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(UJAXP.getDocument(uri, errorHandler));
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefine(String uri) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        define_.setup(UJAXP.getDocument(uri, errorHandler));
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElement(String uri) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(UJAXP.getDocument(uri, errorHandler));
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternData_.setup(uri);
        patternData_.setRContext(rContext);
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        param_.setup(uri);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        exceptPattern_.setup(uri);
        exceptPattern_.setRContext(rContext);
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternAttribute_.setup(uri);
        patternAttribute_.setRContext(rContext);
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        nameClassNsName_.setup(uri);
        nameClassNsName_.setRContext(rContext);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        exceptNameClass_.setup(uri);
        exceptNameClass_.setRContext(rContext);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        nameClassChoice_.setup(uri);
        nameClassChoice_.setRContext(rContext);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        nameClassAnyName_.setup(uri);
        nameClassAnyName_.setRContext(rContext);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        nameClassName_.setup(uri);
        nameClassName_.setRContext(rContext);
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternOneOrMoreAttribute_.setup(uri);
        patternOneOrMoreAttribute_.setRContext(rContext);
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternNonExistentAttribute_.setup(uri);
        patternNonExistentAttribute_.setRContext(rContext);
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternChoice_.setup(uri);
        patternChoice_.setRContext(rContext);
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternGroup_.setup(uri);
        patternGroup_.setRContext(rContext);
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternInterleave_.setup(uri);
        patternInterleave_.setRContext(rContext);
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternValue_.setup(uri);
        patternValue_.setRContext(rContext);
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternListWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternList_.setup(uri);
        patternList_.setRContext(rContext);
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternRef_.setup(uri);
        patternRef_.setRContext(rContext);
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternOneOrMore_.setup(uri);
        patternOneOrMore_.setRContext(rContext);
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternNotAllowed_.setup(uri);
        patternNotAllowed_.setRContext(rContext);
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternEmpty_.setup(uri);
        patternEmpty_.setRContext(rContext);
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        patternText_.setup(uri);
        patternText_.setRContext(rContext);
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        rootGrammar_.setup(uri);
        rootGrammar_.setRContext(rContext);
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        rootGrammarStart_.setup(uri);
        rootGrammarStart_.setRContext(rContext);
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefineWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        define_.setup(uri);
        define_.setRContext(rContext);
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        defineElement_.setup(uri);
        defineElement_.setRContext(rContext);
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternData(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        patternData_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(url, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(URL url) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(UJAXP.getDocument(url, errorHandler));
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(URL url) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(url, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(url, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValue(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternList(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        patternList_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRef(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternText(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        patternText_.setup(UJAXP.getDocument(url, errorHandler));
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(UJAXP.getDocument(url, errorHandler));
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(UJAXP.getDocument(url, errorHandler));
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefine(URL url) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        define_.setup(UJAXP.getDocument(url, errorHandler));
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElement(URL url) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(UJAXP.getDocument(url, errorHandler));
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternData_.setup(url);
        patternData_.setRContext(rContext);
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        param_.setup(url);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        exceptPattern_.setup(url);
        exceptPattern_.setRContext(rContext);
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternAttribute_.setup(url);
        patternAttribute_.setRContext(rContext);
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassNsName_.setup(url);
        nameClassNsName_.setRContext(rContext);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        exceptNameClass_.setup(url);
        exceptNameClass_.setRContext(rContext);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassChoice_.setup(url);
        nameClassChoice_.setRContext(rContext);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassAnyName_.setup(url);
        nameClassAnyName_.setRContext(rContext);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nameClassName_.setup(url);
        nameClassName_.setRContext(rContext);
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternOneOrMoreAttribute_.setup(url);
        patternOneOrMoreAttribute_.setRContext(rContext);
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternNonExistentAttribute_.setup(url);
        patternNonExistentAttribute_.setRContext(rContext);
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternChoice_.setup(url);
        patternChoice_.setRContext(rContext);
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternGroup_.setup(url);
        patternGroup_.setRContext(rContext);
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternInterleave_.setup(url);
        patternInterleave_.setRContext(rContext);
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternValue_.setup(url);
        patternValue_.setRContext(rContext);
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternListWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternList_.setup(url);
        patternList_.setRContext(rContext);
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternRef_.setup(url);
        patternRef_.setRContext(rContext);
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternOneOrMore_.setup(url);
        patternOneOrMore_.setRContext(rContext);
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternNotAllowed_.setup(url);
        patternNotAllowed_.setRContext(rContext);
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternEmpty_.setup(url);
        patternEmpty_.setRContext(rContext);
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        patternText_.setup(url);
        patternText_.setRContext(rContext);
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        rootGrammar_.setup(url);
        rootGrammar_.setRContext(rContext);
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        rootGrammarStart_.setup(url);
        rootGrammarStart_.setRContext(rContext);
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefineWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        define_.setup(url);
        define_.setRContext(rContext);
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        defineElement_.setup(url);
        defineElement_.setRContext(rContext);
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternData(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        patternData_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(in, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(UJAXP.getDocument(in, errorHandler));
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(in, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(in, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValue(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternList(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        patternList_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRef(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternText(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        patternText_.setup(UJAXP.getDocument(in, errorHandler));
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(UJAXP.getDocument(in, errorHandler));
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(UJAXP.getDocument(in, errorHandler));
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefine(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        define_.setup(UJAXP.getDocument(in, errorHandler));
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElement(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(UJAXP.getDocument(in, errorHandler));
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData(in);
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(in);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern(in);
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute(in);
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName(in);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(in);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice(in);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(in);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName(in);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute(in);
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute(in);
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice(in);
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup(in);
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave(in);
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue(in);
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternListWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList(in);
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef(in);
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore(in);
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed(in);
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty(in);
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText(in);
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar(in);
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart(in);
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefineWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine(in);
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement(in);
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternData(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        patternData_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(is, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(UJAXP.getDocument(is, errorHandler));
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(is, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(is, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValue(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternList(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        patternList_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRef(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternText(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        patternText_.setup(UJAXP.getDocument(is, errorHandler));
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(UJAXP.getDocument(is, errorHandler));
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(UJAXP.getDocument(is, errorHandler));
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefine(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        define_.setup(UJAXP.getDocument(is, errorHandler));
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElement(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(UJAXP.getDocument(is, errorHandler));
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData(is);
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(is);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern(is);
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute(is);
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName(is);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(is);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice(is);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(is);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName(is);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute(is);
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute(is);
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice(is);
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup(is);
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave(is);
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue(is);
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternListWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList(is);
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef(is);
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore(is);
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed(is);
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty(is);
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText(is);
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar(is);
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart(is);
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefineWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine(is);
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement(is);
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternData(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData();
        patternData_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(reader, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(UJAXP.getDocument(reader, errorHandler));
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(UJAXP.getDocument(reader, errorHandler));
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassName(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValue(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternList(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList();
        patternList_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRef(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternText(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText();
        patternText_.setup(UJAXP.getDocument(reader, errorHandler));
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(UJAXP.getDocument(reader, errorHandler));
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(UJAXP.getDocument(reader, errorHandler));
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefine(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine();
        define_.setup(UJAXP.getDocument(reader, errorHandler));
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElement(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(UJAXP.getDocument(reader, errorHandler));
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternData patternData_ = createPatternData(reader);
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(reader);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ExceptPattern exceptPattern_ = createExceptPattern(reader);
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternAttribute patternAttribute_ = createPatternAttribute(reader);
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassNsName nameClassNsName_ = createNameClassNsName(reader);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(reader);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassChoice nameClassChoice_ = createNameClassChoice(reader);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(reader);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NameClassName nameClassName_ = createNameClassName(reader);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute(reader);
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute(reader);
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternChoice patternChoice_ = createPatternChoice(reader);
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternGroup patternGroup_ = createPatternGroup(reader);
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternInterleave patternInterleave_ = createPatternInterleave(reader);
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternValue patternValue_ = createPatternValue(reader);
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    public PatternList createPatternListWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternList patternList_ = createPatternList(reader);
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternRef patternRef_ = createPatternRef(reader);
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore(reader);
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed(reader);
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternEmpty patternEmpty_ = createPatternEmpty(reader);
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        PatternText patternText_ = createPatternText(reader);
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootGrammar rootGrammar_ = createRootGrammar(reader);
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart(reader);
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    public Define createDefineWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Define define_ = createDefine(reader);
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        DefineElement defineElement_ = createDefineElement(reader);
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> with Context.
     *
     * @return PatternData
     */
    public PatternData createPatternDataWithContext() {
        PatternData patternData_ = createPatternData();
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> with Context.
     *
     * @return Param
     */
    public Param createParamWithContext() {
        Param param_ = createParam();
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> with Context.
     *
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext() {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> with Context.
     *
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext() {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> with Context.
     *
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext() {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> with Context.
     *
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext() {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> with Context.
     *
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext() {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> with Context.
     *
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext() {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> with Context.
     *
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext() {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> with Context.
     *
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext() {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> with Context.
     *
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext() {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> with Context.
     *
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext() {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> with Context.
     *
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext() {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> with Context.
     *
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext() {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> with Context.
     *
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext() {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> with Context.
     *
     * @return PatternList
     */
    public PatternList createPatternListWithContext() {
        PatternList patternList_ = createPatternList();
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> with Context.
     *
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext() {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> with Context.
     *
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext() {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> with Context.
     *
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext() {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> with Context.
     *
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext() {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> with Context.
     *
     * @return PatternText
     */
    public PatternText createPatternTextWithContext() {
        PatternText patternText_ = createPatternText();
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> with Context.
     *
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext() {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> with Context.
     *
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext() {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> with Context.
     *
     * @return Define
     */
    public Define createDefineWithContext() {
        Define define_ = createDefine();
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> with Context.
     *
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext() {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternData
     */
    public PatternData createPatternData(Document doc) {
        PatternData patternData_ = createPatternData();
        patternData_.setup(doc);
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParam(Document doc) {
        Param param_ = createParam();
        param_.setup(doc);
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(Document doc) {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(doc);
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(Document doc) {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(doc);
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(Document doc) {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(doc);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(Document doc) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(doc);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(Document doc) {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(doc);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(Document doc) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(doc);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassName
     */
    public NameClassName createNameClassName(Document doc) {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(doc);
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(Document doc) {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(doc);
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(Document doc) {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(doc);
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(Document doc) {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(doc);
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(Document doc) {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(doc);
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(Document doc) {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(doc);
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternValue
     */
    public PatternValue createPatternValue(Document doc) {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(doc);
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternList
     */
    public PatternList createPatternList(Document doc) {
        PatternList patternList_ = createPatternList();
        patternList_.setup(doc);
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternRef
     */
    public PatternRef createPatternRef(Document doc) {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(doc);
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(Document doc) {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(doc);
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(Document doc) {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(doc);
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(Document doc) {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(doc);
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternText
     */
    public PatternText createPatternText(Document doc) {
        PatternText patternText_ = createPatternText();
        patternText_.setup(doc);
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(Document doc) {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(doc);
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(Document doc) {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(doc);
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Define
     */
    public Define createDefine(Document doc) {
        Define define_ = createDefine();
        define_.setup(doc);
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return DefineElement
     */
    public DefineElement createDefineElement(Document doc) {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(doc);
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(Document doc) {
        PatternData patternData_ = createPatternData(doc);
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParamWithContext(Document doc) {
        Param param_ = createParam(doc);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(Document doc) {
        ExceptPattern exceptPattern_ = createExceptPattern(doc);
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(Document doc) {
        PatternAttribute patternAttribute_ = createPatternAttribute(doc);
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(Document doc) {
        NameClassNsName nameClassNsName_ = createNameClassNsName(doc);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(Document doc) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(doc);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(Document doc) {
        NameClassChoice nameClassChoice_ = createNameClassChoice(doc);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(Document doc) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(doc);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(Document doc) {
        NameClassName nameClassName_ = createNameClassName(doc);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(Document doc) {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute(doc);
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(Document doc) {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute(doc);
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(Document doc) {
        PatternChoice patternChoice_ = createPatternChoice(doc);
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(Document doc) {
        PatternGroup patternGroup_ = createPatternGroup(doc);
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(Document doc) {
        PatternInterleave patternInterleave_ = createPatternInterleave(doc);
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(Document doc) {
        PatternValue patternValue_ = createPatternValue(doc);
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternList
     */
    public PatternList createPatternListWithContext(Document doc) {
        PatternList patternList_ = createPatternList(doc);
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(Document doc) {
        PatternRef patternRef_ = createPatternRef(doc);
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(Document doc) {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore(doc);
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(Document doc) {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed(doc);
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(Document doc) {
        PatternEmpty patternEmpty_ = createPatternEmpty(doc);
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(Document doc) {
        PatternText patternText_ = createPatternText(doc);
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(Document doc) {
        RootGrammar rootGrammar_ = createRootGrammar(doc);
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(Document doc) {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart(doc);
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Define
     */
    public Define createDefineWithContext(Document doc) {
        Define define_ = createDefine(doc);
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(Document doc) {
        DefineElement defineElement_ = createDefineElement(doc);
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternData
     */
    public PatternData createPatternData(Element element) {
        PatternData patternData_ = createPatternData();
        patternData_.setup(element);
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParam(Element element) {
        Param param_ = createParam();
        param_.setup(element);
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(Element element) {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(element);
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(Element element) {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(element);
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(Element element) {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(element);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(Element element) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(element);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(Element element) {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(element);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(Element element) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(element);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassName
     */
    public NameClassName createNameClassName(Element element) {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(element);
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(Element element) {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(element);
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(Element element) {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(element);
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(Element element) {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(element);
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(Element element) {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(element);
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(Element element) {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(element);
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternValue
     */
    public PatternValue createPatternValue(Element element) {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(element);
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternList
     */
    public PatternList createPatternList(Element element) {
        PatternList patternList_ = createPatternList();
        patternList_.setup(element);
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternRef
     */
    public PatternRef createPatternRef(Element element) {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(element);
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(Element element) {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(element);
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(Element element) {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(element);
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(Element element) {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(element);
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternText
     */
    public PatternText createPatternText(Element element) {
        PatternText patternText_ = createPatternText();
        patternText_.setup(element);
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(Element element) {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(element);
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(Element element) {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(element);
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Define
     */
    public Define createDefine(Element element) {
        Define define_ = createDefine();
        define_.setup(element);
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return DefineElement
     */
    public DefineElement createDefineElement(Element element) {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(element);
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(Element element) {
        PatternData patternData_ = createPatternData(element);
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParamWithContext(Element element) {
        Param param_ = createParam(element);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(Element element) {
        ExceptPattern exceptPattern_ = createExceptPattern(element);
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(Element element) {
        PatternAttribute patternAttribute_ = createPatternAttribute(element);
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(Element element) {
        NameClassNsName nameClassNsName_ = createNameClassNsName(element);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(Element element) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(element);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(Element element) {
        NameClassChoice nameClassChoice_ = createNameClassChoice(element);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(Element element) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(element);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(Element element) {
        NameClassName nameClassName_ = createNameClassName(element);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(Element element) {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute(element);
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(Element element) {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute(element);
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(Element element) {
        PatternChoice patternChoice_ = createPatternChoice(element);
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(Element element) {
        PatternGroup patternGroup_ = createPatternGroup(element);
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(Element element) {
        PatternInterleave patternInterleave_ = createPatternInterleave(element);
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(Element element) {
        PatternValue patternValue_ = createPatternValue(element);
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternList
     */
    public PatternList createPatternListWithContext(Element element) {
        PatternList patternList_ = createPatternList(element);
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(Element element) {
        PatternRef patternRef_ = createPatternRef(element);
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(Element element) {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore(element);
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(Element element) {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed(element);
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(Element element) {
        PatternEmpty patternEmpty_ = createPatternEmpty(element);
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(Element element) {
        PatternText patternText_ = createPatternText(element);
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(Element element) {
        RootGrammar rootGrammar_ = createRootGrammar(element);
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(Element element) {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart(element);
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Define
     */
    public Define createDefineWithContext(Element element) {
        Define define_ = createDefine(element);
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(Element element) {
        DefineElement defineElement_ = createDefineElement(element);
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternData
     */
    public PatternData createPatternData(RStack stack) {
        PatternData patternData_ = createPatternData();
        patternData_.setup(stack);
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParam(RStack stack) {
        Param param_ = createParam();
        param_.setup(stack);
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPattern(RStack stack) {
        ExceptPattern exceptPattern_ = createExceptPattern();
        exceptPattern_.setup(stack);
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttribute(RStack stack) {
        PatternAttribute patternAttribute_ = createPatternAttribute();
        patternAttribute_.setup(stack);
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsName(RStack stack) {
        NameClassNsName nameClassNsName_ = createNameClassNsName();
        nameClassNsName_.setup(stack);
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClass(RStack stack) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass();
        exceptNameClass_.setup(stack);
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoice(RStack stack) {
        NameClassChoice nameClassChoice_ = createNameClassChoice();
        nameClassChoice_.setup(stack);
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyName(RStack stack) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName();
        nameClassAnyName_.setup(stack);
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassName
     */
    public NameClassName createNameClassName(RStack stack) {
        NameClassName nameClassName_ = createNameClassName();
        nameClassName_.setup(stack);
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(RStack stack) {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute();
        patternOneOrMoreAttribute_.setup(stack);
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttribute(RStack stack) {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute();
        patternNonExistentAttribute_.setup(stack);
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternChoice
     */
    public PatternChoice createPatternChoice(RStack stack) {
        PatternChoice patternChoice_ = createPatternChoice();
        patternChoice_.setup(stack);
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternGroup
     */
    public PatternGroup createPatternGroup(RStack stack) {
        PatternGroup patternGroup_ = createPatternGroup();
        patternGroup_.setup(stack);
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleave(RStack stack) {
        PatternInterleave patternInterleave_ = createPatternInterleave();
        patternInterleave_.setup(stack);
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternValue
     */
    public PatternValue createPatternValue(RStack stack) {
        PatternValue patternValue_ = createPatternValue();
        patternValue_.setup(stack);
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternList
     */
    public PatternList createPatternList(RStack stack) {
        PatternList patternList_ = createPatternList();
        patternList_.setup(stack);
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternRef
     */
    public PatternRef createPatternRef(RStack stack) {
        PatternRef patternRef_ = createPatternRef();
        patternRef_.setup(stack);
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMore(RStack stack) {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore();
        patternOneOrMore_.setup(stack);
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowed(RStack stack) {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed();
        patternNotAllowed_.setup(stack);
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmpty(RStack stack) {
        PatternEmpty patternEmpty_ = createPatternEmpty();
        patternEmpty_.setup(stack);
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternText
     */
    public PatternText createPatternText(RStack stack) {
        PatternText patternText_ = createPatternText();
        patternText_.setup(stack);
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootGrammar
     */
    public RootGrammar createRootGrammar(RStack stack) {
        RootGrammar rootGrammar_ = createRootGrammar();
        rootGrammar_.setup(stack);
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStart(RStack stack) {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart();
        rootGrammarStart_.setup(stack);
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Define
     */
    public Define createDefine(RStack stack) {
        Define define_ = createDefine();
        define_.setup(stack);
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return DefineElement
     */
    public DefineElement createDefineElement(RStack stack) {
        DefineElement defineElement_ = createDefineElement();
        defineElement_.setup(stack);
        return (defineElement_);
    }

    /**
     * Creates a <code>PatternData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternData
     */
    public PatternData createPatternDataWithContext(RStack stack) {
        PatternData patternData_ = createPatternData(stack);
        patternData_.setRContext(createRContext());
        return (patternData_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParamWithContext(RStack stack) {
        Param param_ = createParam(stack);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>ExceptPattern</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptPattern
     */
    public ExceptPattern createExceptPatternWithContext(RStack stack) {
        ExceptPattern exceptPattern_ = createExceptPattern(stack);
        exceptPattern_.setRContext(createRContext());
        return (exceptPattern_);
    }

    /**
     * Creates a <code>PatternAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternAttribute
     */
    public PatternAttribute createPatternAttributeWithContext(RStack stack) {
        PatternAttribute patternAttribute_ = createPatternAttribute(stack);
        patternAttribute_.setRContext(createRContext());
        return (patternAttribute_);
    }

    /**
     * Creates a <code>NameClassNsName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassNsName
     */
    public NameClassNsName createNameClassNsNameWithContext(RStack stack) {
        NameClassNsName nameClassNsName_ = createNameClassNsName(stack);
        nameClassNsName_.setRContext(createRContext());
        return (nameClassNsName_);
    }

    /**
     * Creates a <code>ExceptNameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptNameClass
     */
    public ExceptNameClass createExceptNameClassWithContext(RStack stack) {
        ExceptNameClass exceptNameClass_ = createExceptNameClass(stack);
        exceptNameClass_.setRContext(createRContext());
        return (exceptNameClass_);
    }

    /**
     * Creates a <code>NameClassChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassChoice
     */
    public NameClassChoice createNameClassChoiceWithContext(RStack stack) {
        NameClassChoice nameClassChoice_ = createNameClassChoice(stack);
        nameClassChoice_.setRContext(createRContext());
        return (nameClassChoice_);
    }

    /**
     * Creates a <code>NameClassAnyName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassAnyName
     */
    public NameClassAnyName createNameClassAnyNameWithContext(RStack stack) {
        NameClassAnyName nameClassAnyName_ = createNameClassAnyName(stack);
        nameClassAnyName_.setRContext(createRContext());
        return (nameClassAnyName_);
    }

    /**
     * Creates a <code>NameClassName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassName
     */
    public NameClassName createNameClassNameWithContext(RStack stack) {
        NameClassName nameClassName_ = createNameClassName(stack);
        nameClassName_.setRContext(createRContext());
        return (nameClassName_);
    }

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternOneOrMoreAttribute
     */
    public PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(RStack stack) {
        PatternOneOrMoreAttribute patternOneOrMoreAttribute_ = createPatternOneOrMoreAttribute(stack);
        patternOneOrMoreAttribute_.setRContext(createRContext());
        return (patternOneOrMoreAttribute_);
    }

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternNonExistentAttribute
     */
    public PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(RStack stack) {
        PatternNonExistentAttribute patternNonExistentAttribute_ = createPatternNonExistentAttribute(stack);
        patternNonExistentAttribute_.setRContext(createRContext());
        return (patternNonExistentAttribute_);
    }

    /**
     * Creates a <code>PatternChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternChoice
     */
    public PatternChoice createPatternChoiceWithContext(RStack stack) {
        PatternChoice patternChoice_ = createPatternChoice(stack);
        patternChoice_.setRContext(createRContext());
        return (patternChoice_);
    }

    /**
     * Creates a <code>PatternGroup</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternGroup
     */
    public PatternGroup createPatternGroupWithContext(RStack stack) {
        PatternGroup patternGroup_ = createPatternGroup(stack);
        patternGroup_.setRContext(createRContext());
        return (patternGroup_);
    }

    /**
     * Creates a <code>PatternInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternInterleave
     */
    public PatternInterleave createPatternInterleaveWithContext(RStack stack) {
        PatternInterleave patternInterleave_ = createPatternInterleave(stack);
        patternInterleave_.setRContext(createRContext());
        return (patternInterleave_);
    }

    /**
     * Creates a <code>PatternValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternValue
     */
    public PatternValue createPatternValueWithContext(RStack stack) {
        PatternValue patternValue_ = createPatternValue(stack);
        patternValue_.setRContext(createRContext());
        return (patternValue_);
    }

    /**
     * Creates a <code>PatternList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternList
     */
    public PatternList createPatternListWithContext(RStack stack) {
        PatternList patternList_ = createPatternList(stack);
        patternList_.setRContext(createRContext());
        return (patternList_);
    }

    /**
     * Creates a <code>PatternRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternRef
     */
    public PatternRef createPatternRefWithContext(RStack stack) {
        PatternRef patternRef_ = createPatternRef(stack);
        patternRef_.setRContext(createRContext());
        return (patternRef_);
    }

    /**
     * Creates a <code>PatternOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternOneOrMore
     */
    public PatternOneOrMore createPatternOneOrMoreWithContext(RStack stack) {
        PatternOneOrMore patternOneOrMore_ = createPatternOneOrMore(stack);
        patternOneOrMore_.setRContext(createRContext());
        return (patternOneOrMore_);
    }

    /**
     * Creates a <code>PatternNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternNotAllowed
     */
    public PatternNotAllowed createPatternNotAllowedWithContext(RStack stack) {
        PatternNotAllowed patternNotAllowed_ = createPatternNotAllowed(stack);
        patternNotAllowed_.setRContext(createRContext());
        return (patternNotAllowed_);
    }

    /**
     * Creates a <code>PatternEmpty</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternEmpty
     */
    public PatternEmpty createPatternEmptyWithContext(RStack stack) {
        PatternEmpty patternEmpty_ = createPatternEmpty(stack);
        patternEmpty_.setRContext(createRContext());
        return (patternEmpty_);
    }

    /**
     * Creates a <code>PatternText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return PatternText
     */
    public PatternText createPatternTextWithContext(RStack stack) {
        PatternText patternText_ = createPatternText(stack);
        patternText_.setRContext(createRContext());
        return (patternText_);
    }

    /**
     * Creates a <code>RootGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootGrammar
     */
    public RootGrammar createRootGrammarWithContext(RStack stack) {
        RootGrammar rootGrammar_ = createRootGrammar(stack);
        rootGrammar_.setRContext(createRContext());
        return (rootGrammar_);
    }

    /**
     * Creates a <code>RootGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return RootGrammarStart
     */
    public RootGrammarStart createRootGrammarStartWithContext(RStack stack) {
        RootGrammarStart rootGrammarStart_ = createRootGrammarStart(stack);
        rootGrammarStart_.setRContext(createRContext());
        return (rootGrammarStart_);
    }

    /**
     * Creates a <code>Define</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Define
     */
    public Define createDefineWithContext(RStack stack) {
        Define define_ = createDefine(stack);
        define_.setRContext(createRContext());
        return (define_);
    }

    /**
     * Creates a <code>DefineElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return DefineElement
     */
    public DefineElement createDefineElementWithContext(RStack stack) {
        DefineElement defineElement_ = createDefineElement(stack);
        defineElement_.setRContext(createRContext());
        return (defineElement_);
    }

    /**
     * Creates a <code>NameClassID</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NameClassID
     */
    public NameClassID createNameClassID(RStack stack) {
        NameClassID nameClassID_ = createNameClassID();
        nameClassID_.setup(stack);
        return (nameClassID_);
    }

    /**
     * Creates a <code>Pattern</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Pattern
     */
    public Pattern createPattern(RStack stack) {
        Pattern pattern_ = createPattern();
        pattern_.setup(stack);
        return (pattern_);
    }

    /**
     * Creates a <code>ExceptNameClassID</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ExceptNameClassID
     */
    public ExceptNameClassID createExceptNameClassID(RStack stack) {
        ExceptNameClassID exceptNameClassID_ = createExceptNameClassID();
        exceptNameClassID_.setup(stack);
        return (exceptNameClassID_);
    }

    /**
     * Creates a default <code>RContext</code>.
     * This method is a hook method of the AbstractSimpleSyntaxFactory.
     *
     * @return RContext
     */
    public RContext createRContext() {
        return (new RContext());
    }
}
