package org.iso_relax.miaou.ss;

import java.io.*;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * <b>NameClass</b> is generated by Relaxer based on simpleSyntax.rng.
 * This class is derived from:
 * 
 * <!-- for programmer
 * <define name="nameClass">
 *   <choice>
 *     <element name="anyName">
 *       <optional>
 *         <ref name="exceptNameClass"/>
 *       </optional>
 *     </element>
 *     <element name="nsName">
 *       <ref name="ns"/>
 *       <optional>
 *         <ref name="exceptNameClass"/>
 *       </optional>
 *     </element>
 *     <element name="name">
 *       <ref name="ns"/>
 *       <data type="NCName"/>
 *     </element>
 *     <element name="choice">
 *       <ref name="nameClass"/>
 *       <ref name="nameClass"/>
 *     </element>
 *   </choice>
 * </define>
 * -->
 * <!-- for javadoc -->
 * <pre> &lt;define name="nameClass"&gt;
 *   &lt;choice&gt;
 *     &lt;element name="anyName"&gt;
 *       &lt;optional&gt;
 *         &lt;ref name="exceptNameClass"/&gt;
 *       &lt;/optional&gt;
 *     &lt;/element&gt;
 *     &lt;element name="nsName"&gt;
 *       &lt;ref name="ns"/&gt;
 *       &lt;optional&gt;
 *         &lt;ref name="exceptNameClass"/&gt;
 *       &lt;/optional&gt;
 *     &lt;/element&gt;
 *     &lt;element name="name"&gt;
 *       &lt;ref name="ns"/&gt;
 *       &lt;data type="NCName"/&gt;
 *     &lt;/element&gt;
 *     &lt;element name="choice"&gt;
 *       &lt;ref name="nameClass"/&gt;
 *       &lt;ref name="nameClass"/&gt;
 *     &lt;/element&gt;
 *   &lt;/choice&gt;
 * &lt;/define&gt;
 * </pre>
 *
 * @version simpleSyntax.rng (Sat Sep 07 19:36:07 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public class NameClass implements java.io.Serializable, IRNSContainer, IRVisitable, IRNode {
    private RNSContext rNSContext_ = new RNSContext(this, "http://relaxng.org/ns/structure/1.0");
    private INameClassChoice content_;
    private IRNode parentRNode_;
    private RContext rContext_;

    /**
     * Creates a <code>NameClass</code>.
     *
     */
    public NameClass() {
    }

    /**
     * Creates a <code>NameClass</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public NameClass(RStack stack) {
        setup(stack);
    }

    /**
     * Initializes the <code>NameClass</code> by the Stack <code>stack</code>
     * that contains Elements.
     * This constructor is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     */
    public void setup(RStack stack) {
        Element element = stack.getContextElement();
        ISimpleSyntaxFactory factory = SimpleSyntaxFactory.getFactory();
        if (NameClassNsName.isMatch(stack)) {
            setContent(factory.createNameClassNsName(stack));
        } else if (NameClassChoice.isMatch(stack)) {
            setContent(factory.createNameClassChoice(stack));
        } else if (NameClassAnyName.isMatch(stack)) {
            setContent(factory.createNameClassAnyName(stack));
        } else if (NameClassName.isMatch(stack)) {
            setContent(factory.createNameClassName(stack));
        } else {
            throw (new IllegalArgumentException());
        }
    }

    /**
     * Creates a DOM representation of the object.
     * Result is appended to the Node <code>parent</code>.
     *
     * @param parent
     */
    public void makeElement(Node parent) {
        Document doc = parent.getOwnerDocument();
        Element element = (Element)parent;
        int size;
        this.content_.makeElement(element);
    }

    /**
     * Gets the RNSContext property <b>rNSContext</b>.
     *
     * @return RNSContext
     */
    public final RNSContext getRNSContext() {
        return (rNSContext_);
    }

    /**
     * Sets the RNSContext property <b>rNSContext</b>.
     *
     * @param rNSContext
     */
    public final void setRNSContext(RNSContext rNSContext) {
        this.rNSContext_ = rNSContext;
    }

    /**
     * Gets the INameClassChoice property <b>content</b>.
     *
     * @return INameClassChoice
     */
    public final INameClassChoice getContent() {
        return (content_);
    }

    /**
     * Sets the INameClassChoice property <b>content</b>.
     *
     * @param content
     */
    public final void setContent(INameClassChoice content) {
        this.content_ = content;
        if (content != null) {
            content.setParentRNode(this);
        }
    }

    /**
     * Makes a XML text representation.
     *
     * @return String
     */
    public String makeTextDocument() {
        StringBuffer buffer = new StringBuffer();
        makeTextElement(buffer);
        return (new String(buffer));
    }

    /**
     * Makes a XML text representation.
     *
     * @param buffer
     */
    public void makeTextElement(StringBuffer buffer) {
        int size;
        content_.makeTextElement(buffer);
    }

    /**
     * Makes a XML text representation.
     *
     * @param buffer
     */
    public void makeTextElement(PrintWriter buffer) {
        int size;
        content_.makeTextElement(buffer);
    }

    /**
     * Returns a String representation of this object.
     * While this method informs as XML format representaion, 
     *  it's purpose is just information, not making 
     * a rigid XML documentation.
     *
     * @return String
     */
    public String toString() {
        try {
            return (makeTextDocument());
        } catch (Exception e) {
            return (super.toString());
        }
    }

    /**
     * Accepts the Visitor for enter behavior.
     *
     * @param visitor
     * @return boolean
     */
    public boolean enter(IRVisitor visitor) {
        return (visitor.enter(this));
    }

    /**
     * Accepts the Visitor for leave behavior.
     *
     * @param visitor
     */
    public void leave(IRVisitor visitor) {
        visitor.leave(this);
    }

    /**
     * Gets the IRNode property <b>parentRNode</b>.
     *
     * @return IRNode
     */
    public final IRNode getParentRNode() {
        return (parentRNode_);
    }

    /**
     * Sets the IRNode property <b>parentRNode</b>.
     *
     * @param parentRNode
     */
    public final void setParentRNode(IRNode parentRNode) {
        this.parentRNode_ = parentRNode;
    }

    /**
     * Gets child RNodes.
     *
     * @return IRNode[]
     */
    public IRNode[] getRNodes() {
        java.util.List classNodes = new java.util.ArrayList();
        classNodes.add(content_);
        IRNode[] nodes = new IRNode[classNodes.size()];
        return ((IRNode[])classNodes.toArray(nodes));
    }

    /**
     * Gets the RContext property <b>rContext</b>.
     *
     * @return RContext
     */
    public final RContext getRContext() {
        return (rContext_);
    }

    /**
     * Sets the RContext property <b>rContext</b>.
     *
     * @param rContext
     */
    public final void setRContext(RContext rContext) {
        this.rContext_ = rContext;
        IRNode[] contextRNodes = getRNodes();
        for (int i = 0;i < contextRNodes.length;i++) {
            contextRNodes[i].setRContext(rContext_);
        }
    }

    /**
     * Gets the property "rContext" which is resolved recursively.
     *
     * @return RContext
     */
    public RContext getRContextResolved() {
        return (parentRNode_.getRContextResolved());
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>NameClass</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatch(RStack stack) {
        return (isMatchHungry(stack.makeClone()));
    }

    /**
     * Tests if elements contained in a Stack <code>stack</code>
     * is valid for the <code>NameClass</code>.
     * This method consumes the stack contents during matching operation.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return boolean
     */
    public static boolean isMatchHungry(RStack stack) {
        RStack target = stack;
        boolean $match$ = false;
        Element child;
        if (NameClassNsName.isMatchHungry(target)) {
            $match$ = true;
        } else if (NameClassChoice.isMatchHungry(target)) {
            $match$ = true;
        } else if (NameClassAnyName.isMatchHungry(target)) {
            $match$ = true;
        } else if (NameClassName.isMatchHungry(target)) {
            $match$ = true;
        } else {
            return (false);
        }
        return ($match$);
    }
}
