package org.iso_relax.miaou.ss;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * ISimpleSyntaxFactory is generated by Relaxer based on simpleSyntax.rng.
 *
 * @version simpleSyntax.rng 1.0 (Sat Sep 07 19:36:08 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public interface ISimpleSyntaxFactory {
    /**
     * Sets a error handler to handle parsing error.
     *
     * @param handler
     */
    void setErrorHandler(org.xml.sax.ErrorHandler handler);

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Document <code>dom</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(Document doc) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(Document doc) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode create(Element element) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    IRNode createWithContext(Element element) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassName(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternData(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValue(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternList(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRef(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternText(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefine(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElement(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternDataWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParamWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternListWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternTextWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefineWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the File <code>file</code>.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(File file) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassName(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternData(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValue(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternList(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRef(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternText(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefine(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElement(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternDataWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParamWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternListWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternTextWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefineWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code>
     * by the String representation of URI <code>uri</code>.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(String uri) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassName(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternData(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValue(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternList(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRef(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternText(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefine(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElement(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternDataWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParamWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternListWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternTextWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefineWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the URL <code>url</code>.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(URL url) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassName(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternData(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValue(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternList(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRef(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternText(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefine(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElement(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternDataWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParamWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternListWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternTextWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefineWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the InputStream <code>in</code>.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassName(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternData(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValue(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternList(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRef(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternText(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefine(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElement(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternDataWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParamWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternListWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternTextWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefineWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the InputSource <code>is</code>.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassName(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternData(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParam(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValue(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternList(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRef(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternText(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefine(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElement(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptNameClass</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassChoice</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassAnyName</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassName</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternData</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternData
     */
    PatternData createPatternDataWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    Param createParamWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>ExceptPattern</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternChoice</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternGroup</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternInterleave</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternValue</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternList</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternList
     */
    PatternList createPatternListWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternRef</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternOneOrMore</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternNotAllowed</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternEmpty</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>PatternText</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return PatternText
     */
    PatternText createPatternTextWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammar</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>RootGrammarStart</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>Define</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Define
     */
    Define createDefineWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>DefineElement</code> by the Reader <code>reader</code>.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException;

    /**
     * Creates a <code>NameClassNsName</code>.
     *
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName();

    /**
     * Creates a <code>ExceptNameClass</code>.
     *
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass();

    /**
     * Creates a <code>NameClassChoice</code>.
     *
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice();

    /**
     * Creates a <code>NameClassAnyName</code>.
     *
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName();

    /**
     * Creates a <code>NameClassName</code>.
     *
     * @return NameClassName
     */
    NameClassName createNameClassName();

    /**
     * Creates a <code>PatternData</code>.
     *
     * @return PatternData
     */
    PatternData createPatternData();

    /**
     * Creates a <code>Param</code>.
     *
     * @return Param
     */
    Param createParam();

    /**
     * Creates a <code>ExceptPattern</code>.
     *
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern();

    /**
     * Creates a <code>PatternAttribute</code>.
     *
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute();

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code>.
     *
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute();

    /**
     * Creates a <code>PatternNonExistentAttribute</code>.
     *
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute();

    /**
     * Creates a <code>PatternChoice</code>.
     *
     * @return PatternChoice
     */
    PatternChoice createPatternChoice();

    /**
     * Creates a <code>PatternGroup</code>.
     *
     * @return PatternGroup
     */
    PatternGroup createPatternGroup();

    /**
     * Creates a <code>PatternInterleave</code>.
     *
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave();

    /**
     * Creates a <code>PatternValue</code>.
     *
     * @return PatternValue
     */
    PatternValue createPatternValue();

    /**
     * Creates a <code>PatternList</code>.
     *
     * @return PatternList
     */
    PatternList createPatternList();

    /**
     * Creates a <code>PatternRef</code>.
     *
     * @return PatternRef
     */
    PatternRef createPatternRef();

    /**
     * Creates a <code>PatternOneOrMore</code>.
     *
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore();

    /**
     * Creates a <code>PatternNotAllowed</code>.
     *
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed();

    /**
     * Creates a <code>PatternEmpty</code>.
     *
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty();

    /**
     * Creates a <code>PatternText</code>.
     *
     * @return PatternText
     */
    PatternText createPatternText();

    /**
     * Creates a <code>RootGrammar</code>.
     *
     * @return RootGrammar
     */
    RootGrammar createRootGrammar();

    /**
     * Creates a <code>RootGrammarStart</code>.
     *
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart();

    /**
     * Creates a <code>Define</code>.
     *
     * @return Define
     */
    Define createDefine();

    /**
     * Creates a <code>DefineElement</code>.
     *
     * @return DefineElement
     */
    DefineElement createDefineElement();

    /**
     * Creates a <code>NameClassNsName</code>.
     *
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext();

    /**
     * Creates a <code>ExceptNameClass</code>.
     *
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext();

    /**
     * Creates a <code>NameClassChoice</code>.
     *
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext();

    /**
     * Creates a <code>NameClassAnyName</code>.
     *
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext();

    /**
     * Creates a <code>NameClassName</code>.
     *
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext();

    /**
     * Creates a <code>PatternData</code>.
     *
     * @return PatternData
     */
    PatternData createPatternDataWithContext();

    /**
     * Creates a <code>Param</code>.
     *
     * @return Param
     */
    Param createParamWithContext();

    /**
     * Creates a <code>ExceptPattern</code>.
     *
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext();

    /**
     * Creates a <code>PatternAttribute</code>.
     *
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext();

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code>.
     *
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext();

    /**
     * Creates a <code>PatternNonExistentAttribute</code>.
     *
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext();

    /**
     * Creates a <code>PatternChoice</code>.
     *
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext();

    /**
     * Creates a <code>PatternGroup</code>.
     *
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext();

    /**
     * Creates a <code>PatternInterleave</code>.
     *
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext();

    /**
     * Creates a <code>PatternValue</code>.
     *
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext();

    /**
     * Creates a <code>PatternList</code>.
     *
     * @return PatternList
     */
    PatternList createPatternListWithContext();

    /**
     * Creates a <code>PatternRef</code>.
     *
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext();

    /**
     * Creates a <code>PatternOneOrMore</code>.
     *
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext();

    /**
     * Creates a <code>PatternNotAllowed</code>.
     *
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext();

    /**
     * Creates a <code>PatternEmpty</code>.
     *
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext();

    /**
     * Creates a <code>PatternText</code>.
     *
     * @return PatternText
     */
    PatternText createPatternTextWithContext();

    /**
     * Creates a <code>RootGrammar</code>.
     *
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext();

    /**
     * Creates a <code>RootGrammarStart</code>.
     *
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext();

    /**
     * Creates a <code>Define</code>.
     *
     * @return Define
     */
    Define createDefineWithContext();

    /**
     * Creates a <code>DefineElement</code>.
     *
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext();

    /**
     * Creates a <code>NameClassNsName</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(Document doc);

    /**
     * Creates a <code>ExceptNameClass</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(Document doc);

    /**
     * Creates a <code>NameClassChoice</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(Document doc);

    /**
     * Creates a <code>NameClassAnyName</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(Document doc);

    /**
     * Creates a <code>NameClassName</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassName
     */
    NameClassName createNameClassName(Document doc);

    /**
     * Creates a <code>PatternData</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternData
     */
    PatternData createPatternData(Document doc);

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Param
     */
    Param createParam(Document doc);

    /**
     * Creates a <code>ExceptPattern</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(Document doc);

    /**
     * Creates a <code>PatternAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(Document doc);

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(Document doc);

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(Document doc);

    /**
     * Creates a <code>PatternChoice</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(Document doc);

    /**
     * Creates a <code>PatternGroup</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(Document doc);

    /**
     * Creates a <code>PatternInterleave</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(Document doc);

    /**
     * Creates a <code>PatternValue</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternValue
     */
    PatternValue createPatternValue(Document doc);

    /**
     * Creates a <code>PatternList</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternList
     */
    PatternList createPatternList(Document doc);

    /**
     * Creates a <code>PatternRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternRef
     */
    PatternRef createPatternRef(Document doc);

    /**
     * Creates a <code>PatternOneOrMore</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(Document doc);

    /**
     * Creates a <code>PatternNotAllowed</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(Document doc);

    /**
     * Creates a <code>PatternEmpty</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(Document doc);

    /**
     * Creates a <code>PatternText</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternText
     */
    PatternText createPatternText(Document doc);

    /**
     * Creates a <code>RootGrammar</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(Document doc);

    /**
     * Creates a <code>RootGrammarStart</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(Document doc);

    /**
     * Creates a <code>Define</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Define
     */
    Define createDefine(Document doc);

    /**
     * Creates a <code>DefineElement</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return DefineElement
     */
    DefineElement createDefineElement(Document doc);

    /**
     * Creates a <code>NameClassNsName</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(Document doc);

    /**
     * Creates a <code>ExceptNameClass</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(Document doc);

    /**
     * Creates a <code>NameClassChoice</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(Document doc);

    /**
     * Creates a <code>NameClassAnyName</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(Document doc);

    /**
     * Creates a <code>NameClassName</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(Document doc);

    /**
     * Creates a <code>PatternData</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternData
     */
    PatternData createPatternDataWithContext(Document doc);

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Param
     */
    Param createParamWithContext(Document doc);

    /**
     * Creates a <code>ExceptPattern</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(Document doc);

    /**
     * Creates a <code>PatternAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(Document doc);

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(Document doc);

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(Document doc);

    /**
     * Creates a <code>PatternChoice</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(Document doc);

    /**
     * Creates a <code>PatternGroup</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(Document doc);

    /**
     * Creates a <code>PatternInterleave</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(Document doc);

    /**
     * Creates a <code>PatternValue</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(Document doc);

    /**
     * Creates a <code>PatternList</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternList
     */
    PatternList createPatternListWithContext(Document doc);

    /**
     * Creates a <code>PatternRef</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(Document doc);

    /**
     * Creates a <code>PatternOneOrMore</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(Document doc);

    /**
     * Creates a <code>PatternNotAllowed</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(Document doc);

    /**
     * Creates a <code>PatternEmpty</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(Document doc);

    /**
     * Creates a <code>PatternText</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return PatternText
     */
    PatternText createPatternTextWithContext(Document doc);

    /**
     * Creates a <code>RootGrammar</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(Document doc);

    /**
     * Creates a <code>RootGrammarStart</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(Document doc);

    /**
     * Creates a <code>Define</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return Define
     */
    Define createDefineWithContext(Document doc);

    /**
     * Creates a <code>DefineElement</code> by the Document <code>doc</code>.
     *
     * @param doc
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(Document doc);

    /**
     * Creates a <code>NameClassNsName</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(Element element);

    /**
     * Creates a <code>ExceptNameClass</code> by the Element <code>element</code>.
     *
     * @param element
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(Element element);

    /**
     * Creates a <code>NameClassChoice</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(Element element);

    /**
     * Creates a <code>NameClassAnyName</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(Element element);

    /**
     * Creates a <code>NameClassName</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassName
     */
    NameClassName createNameClassName(Element element);

    /**
     * Creates a <code>PatternData</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternData
     */
    PatternData createPatternData(Element element);

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Param
     */
    Param createParam(Element element);

    /**
     * Creates a <code>ExceptPattern</code> by the Element <code>element</code>.
     *
     * @param element
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(Element element);

    /**
     * Creates a <code>PatternAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(Element element);

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(Element element);

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(Element element);

    /**
     * Creates a <code>PatternChoice</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(Element element);

    /**
     * Creates a <code>PatternGroup</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(Element element);

    /**
     * Creates a <code>PatternInterleave</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(Element element);

    /**
     * Creates a <code>PatternValue</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternValue
     */
    PatternValue createPatternValue(Element element);

    /**
     * Creates a <code>PatternList</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternList
     */
    PatternList createPatternList(Element element);

    /**
     * Creates a <code>PatternRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternRef
     */
    PatternRef createPatternRef(Element element);

    /**
     * Creates a <code>PatternOneOrMore</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(Element element);

    /**
     * Creates a <code>PatternNotAllowed</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(Element element);

    /**
     * Creates a <code>PatternEmpty</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(Element element);

    /**
     * Creates a <code>PatternText</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternText
     */
    PatternText createPatternText(Element element);

    /**
     * Creates a <code>RootGrammar</code> by the Element <code>element</code>.
     *
     * @param element
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(Element element);

    /**
     * Creates a <code>RootGrammarStart</code> by the Element <code>element</code>.
     *
     * @param element
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(Element element);

    /**
     * Creates a <code>Define</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Define
     */
    Define createDefine(Element element);

    /**
     * Creates a <code>DefineElement</code> by the Element <code>element</code>.
     *
     * @param element
     * @return DefineElement
     */
    DefineElement createDefineElement(Element element);

    /**
     * Creates a <code>NameClassNsName</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(Element element);

    /**
     * Creates a <code>ExceptNameClass</code> by the Element <code>element</code>.
     *
     * @param element
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(Element element);

    /**
     * Creates a <code>NameClassChoice</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(Element element);

    /**
     * Creates a <code>NameClassAnyName</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(Element element);

    /**
     * Creates a <code>NameClassName</code> by the Element <code>element</code>.
     *
     * @param element
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(Element element);

    /**
     * Creates a <code>PatternData</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternData
     */
    PatternData createPatternDataWithContext(Element element);

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Param
     */
    Param createParamWithContext(Element element);

    /**
     * Creates a <code>ExceptPattern</code> by the Element <code>element</code>.
     *
     * @param element
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(Element element);

    /**
     * Creates a <code>PatternAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(Element element);

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(Element element);

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(Element element);

    /**
     * Creates a <code>PatternChoice</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(Element element);

    /**
     * Creates a <code>PatternGroup</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(Element element);

    /**
     * Creates a <code>PatternInterleave</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(Element element);

    /**
     * Creates a <code>PatternValue</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(Element element);

    /**
     * Creates a <code>PatternList</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternList
     */
    PatternList createPatternListWithContext(Element element);

    /**
     * Creates a <code>PatternRef</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(Element element);

    /**
     * Creates a <code>PatternOneOrMore</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(Element element);

    /**
     * Creates a <code>PatternNotAllowed</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(Element element);

    /**
     * Creates a <code>PatternEmpty</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(Element element);

    /**
     * Creates a <code>PatternText</code> by the Element <code>element</code>.
     *
     * @param element
     * @return PatternText
     */
    PatternText createPatternTextWithContext(Element element);

    /**
     * Creates a <code>RootGrammar</code> by the Element <code>element</code>.
     *
     * @param element
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(Element element);

    /**
     * Creates a <code>RootGrammarStart</code> by the Element <code>element</code>.
     *
     * @param element
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(Element element);

    /**
     * Creates a <code>Define</code> by the Element <code>element</code>.
     *
     * @param element
     * @return Define
     */
    Define createDefineWithContext(Element element);

    /**
     * Creates a <code>DefineElement</code> by the Element <code>element</code>.
     *
     * @param element
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(Element element);

    /**
     * Creates a <code>NameClassNsName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsName(RStack stack);

    /**
     * Creates a <code>ExceptNameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClass(RStack stack);

    /**
     * Creates a <code>NameClassChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoice(RStack stack);

    /**
     * Creates a <code>NameClassAnyName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyName(RStack stack);

    /**
     * Creates a <code>NameClassName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassName
     */
    NameClassName createNameClassName(RStack stack);

    /**
     * Creates a <code>PatternData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternData
     */
    PatternData createPatternData(RStack stack);

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Param
     */
    Param createParam(RStack stack);

    /**
     * Creates a <code>ExceptPattern</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return ExceptPattern
     */
    ExceptPattern createExceptPattern(RStack stack);

    /**
     * Creates a <code>PatternAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttribute(RStack stack);

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttribute(RStack stack);

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttribute(RStack stack);

    /**
     * Creates a <code>PatternChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternChoice
     */
    PatternChoice createPatternChoice(RStack stack);

    /**
     * Creates a <code>PatternGroup</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternGroup
     */
    PatternGroup createPatternGroup(RStack stack);

    /**
     * Creates a <code>PatternInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleave(RStack stack);

    /**
     * Creates a <code>PatternValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternValue
     */
    PatternValue createPatternValue(RStack stack);

    /**
     * Creates a <code>PatternList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternList
     */
    PatternList createPatternList(RStack stack);

    /**
     * Creates a <code>PatternRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternRef
     */
    PatternRef createPatternRef(RStack stack);

    /**
     * Creates a <code>PatternOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMore(RStack stack);

    /**
     * Creates a <code>PatternNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowed(RStack stack);

    /**
     * Creates a <code>PatternEmpty</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmpty(RStack stack);

    /**
     * Creates a <code>PatternText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternText
     */
    PatternText createPatternText(RStack stack);

    /**
     * Creates a <code>RootGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return RootGrammar
     */
    RootGrammar createRootGrammar(RStack stack);

    /**
     * Creates a <code>RootGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStart(RStack stack);

    /**
     * Creates a <code>Define</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Define
     */
    Define createDefine(RStack stack);

    /**
     * Creates a <code>DefineElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return DefineElement
     */
    DefineElement createDefineElement(RStack stack);

    /**
     * Creates a <code>NameClassNsName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassNsName
     */
    NameClassNsName createNameClassNsNameWithContext(RStack stack);

    /**
     * Creates a <code>ExceptNameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return ExceptNameClass
     */
    ExceptNameClass createExceptNameClassWithContext(RStack stack);

    /**
     * Creates a <code>NameClassChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassChoice
     */
    NameClassChoice createNameClassChoiceWithContext(RStack stack);

    /**
     * Creates a <code>NameClassAnyName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassAnyName
     */
    NameClassAnyName createNameClassAnyNameWithContext(RStack stack);

    /**
     * Creates a <code>NameClassName</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClassName
     */
    NameClassName createNameClassNameWithContext(RStack stack);

    /**
     * Creates a <code>PatternData</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternData
     */
    PatternData createPatternDataWithContext(RStack stack);

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Param
     */
    Param createParamWithContext(RStack stack);

    /**
     * Creates a <code>ExceptPattern</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return ExceptPattern
     */
    ExceptPattern createExceptPatternWithContext(RStack stack);

    /**
     * Creates a <code>PatternAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternAttribute
     */
    PatternAttribute createPatternAttributeWithContext(RStack stack);

    /**
     * Creates a <code>PatternOneOrMoreAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternOneOrMoreAttribute
     */
    PatternOneOrMoreAttribute createPatternOneOrMoreAttributeWithContext(RStack stack);

    /**
     * Creates a <code>PatternNonExistentAttribute</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternNonExistentAttribute
     */
    PatternNonExistentAttribute createPatternNonExistentAttributeWithContext(RStack stack);

    /**
     * Creates a <code>PatternChoice</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternChoice
     */
    PatternChoice createPatternChoiceWithContext(RStack stack);

    /**
     * Creates a <code>PatternGroup</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternGroup
     */
    PatternGroup createPatternGroupWithContext(RStack stack);

    /**
     * Creates a <code>PatternInterleave</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternInterleave
     */
    PatternInterleave createPatternInterleaveWithContext(RStack stack);

    /**
     * Creates a <code>PatternValue</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternValue
     */
    PatternValue createPatternValueWithContext(RStack stack);

    /**
     * Creates a <code>PatternList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternList
     */
    PatternList createPatternListWithContext(RStack stack);

    /**
     * Creates a <code>PatternRef</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternRef
     */
    PatternRef createPatternRefWithContext(RStack stack);

    /**
     * Creates a <code>PatternOneOrMore</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternOneOrMore
     */
    PatternOneOrMore createPatternOneOrMoreWithContext(RStack stack);

    /**
     * Creates a <code>PatternNotAllowed</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternNotAllowed
     */
    PatternNotAllowed createPatternNotAllowedWithContext(RStack stack);

    /**
     * Creates a <code>PatternEmpty</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternEmpty
     */
    PatternEmpty createPatternEmptyWithContext(RStack stack);

    /**
     * Creates a <code>PatternText</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return PatternText
     */
    PatternText createPatternTextWithContext(RStack stack);

    /**
     * Creates a <code>RootGrammar</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return RootGrammar
     */
    RootGrammar createRootGrammarWithContext(RStack stack);

    /**
     * Creates a <code>RootGrammarStart</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return RootGrammarStart
     */
    RootGrammarStart createRootGrammarStartWithContext(RStack stack);

    /**
     * Creates a <code>Define</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Define
     */
    Define createDefineWithContext(RStack stack);

    /**
     * Creates a <code>DefineElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return DefineElement
     */
    DefineElement createDefineElementWithContext(RStack stack);

    /**
     * Creates a <code>NameClass</code> by the Element <code>element</code>.
     *
     * @return NameClass
     */
    NameClass createNameClass();

    /**
     * Creates a <code>Pattern</code> by the Element <code>element</code>.
     *
     * @return Pattern
     */
    Pattern createPattern();

    /**
     * Creates a <code>NameClass</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return NameClass
     */
    NameClass createNameClass(RStack stack);

    /**
     * Creates a <code>Pattern</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     *
     * @param stack
     * @return Pattern
     */
    Pattern createPattern(RStack stack);

    /**
     * Creates a <code>RContext</code>.
     *
     * @return RContext
     */
    RContext createRContext();
}
