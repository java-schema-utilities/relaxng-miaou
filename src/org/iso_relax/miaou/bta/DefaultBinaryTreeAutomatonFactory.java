package org.iso_relax.miaou.bta;

import org.w3c.dom.*;

/**
 * DefaultBinaryTreeAutomatonFactory is generated by Relaxer based on binaryTreeAutomaton.rng.
 *
 * @version binaryTreeAutomaton.rng 1.0 (Sat Oct 19 02:26:42 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public class DefaultBinaryTreeAutomatonFactory extends AbstractBinaryTreeAutomatonFactory {

    /**
     * Creates a default <code>BinaryTreeAutomaton</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton() {
        return (new BinaryTreeAutomaton());
    }

    /**
     * Creates a default <code>FinalTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition() {
        return (new FinalTransition());
    }

    /**
     * Creates a default <code>StartTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return StartTransition
     */
    public StartTransition createStartTransition() {
        return (new StartTransition());
    }

    /**
     * Creates a default <code>ElementTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return ElementTransition
     */
    public ElementTransition createElementTransition() {
        return (new ElementTransition());
    }

    /**
     * Creates a default <code>TextTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return TextTransition
     */
    public TextTransition createTextTransition() {
        return (new TextTransition());
    }

    /**
     * Creates a default <code>BranchingTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition() {
        return (new BranchingTransition());
    }

    /**
     * Creates a default <code>MergingTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition() {
        return (new MergingTransition());
    }

    /**
     * Creates a default <code>OneOrMoreAttributeTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition() {
        return (new OneOrMoreAttributeTransition());
    }

    /**
     * Creates a default <code>NonExistentAttributeTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition() {
        return (new NonExistentAttributeTransition());
    }

    /**
     * Creates a default <code>AtomicTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition() {
        return (new AtomicTransition());
    }

    /**
     * Creates a default <code>Data</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return Data
     */
    public Data createData() {
        return (new Data());
    }

    /**
     * Creates a default <code>Param</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return Param
     */
    public Param createParam() {
        return (new Param());
    }

    /**
     * Creates a default <code>Value</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return Value
     */
    public Value createValue() {
        return (new Value());
    }

    /**
     * Creates a default <code>ListTransition</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return ListTransition
     */
    public ListTransition createListTransition() {
        return (new ListTransition());
    }
}
