package org.iso_relax.miaou.bta;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractBinaryTreeAutomatonFactory is generated by Relaxer based on binaryTreeAutomaton.rng.
 *
 * @version binaryTreeAutomaton.rng 1.0 (Sat Oct 19 02:26:42 JST 2002)
 * @author  Relaxer 0.17b (http://www.relaxer.org)
 */
public abstract class AbstractBinaryTreeAutomatonFactory implements IBinaryTreeAutomatonFactory {
    protected static org.xml.sax.ErrorHandler errorHandler;

    /**
     * Gets a error handler to handle parsing error.
     *
     * @param handler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler handler) {
        errorHandler = handler;
    }

    /**
     * @return org.xml.sax.ErrorHandler
     */
    public org.xml.sax.ErrorHandler getErrorHandler() {
        return (errorHandler);
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(file, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(file);
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(uri, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(uri);
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(url, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(url);
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        node.setRContext(rContext);
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(in, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(in);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(is, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(is);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(UJAXP.getDocument(reader, errorHandler));
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(reader);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Document doc) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(doc.getDocumentElement());
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (BinaryTreeAutomaton.isMatch(element)) {
            BinaryTreeAutomaton node = createBinaryTreeAutomaton();
            node.setup(element);
            return(node);
        } else if (FinalTransition.isMatch(element)) {
            FinalTransition node = createFinalTransition();
            node.setup(element);
            return(node);
        } else if (StartTransition.isMatch(element)) {
            StartTransition node = createStartTransition();
            node.setup(element);
            return(node);
        } else if (ElementTransition.isMatch(element)) {
            ElementTransition node = createElementTransition();
            node.setup(element);
            return(node);
        } else if (TextTransition.isMatch(element)) {
            TextTransition node = createTextTransition();
            node.setup(element);
            return(node);
        } else if (BranchingTransition.isMatch(element)) {
            BranchingTransition node = createBranchingTransition();
            node.setup(element);
            return(node);
        } else if (MergingTransition.isMatch(element)) {
            MergingTransition node = createMergingTransition();
            node.setup(element);
            return(node);
        } else if (OneOrMoreAttributeTransition.isMatch(element)) {
            OneOrMoreAttributeTransition node = createOneOrMoreAttributeTransition();
            node.setup(element);
            return(node);
        } else if (NonExistentAttributeTransition.isMatch(element)) {
            NonExistentAttributeTransition node = createNonExistentAttributeTransition();
            node.setup(element);
            return(node);
        } else if (AtomicTransition.isMatch(element)) {
            AtomicTransition node = createAtomicTransition();
            node.setup(element);
            return(node);
        } else if (Data.isMatch(element)) {
            Data node = createData();
            node.setup(element);
            return(node);
        } else if (Param.isMatch(element)) {
            Param node = createParam();
            node.setup(element);
            return(node);
        } else if (Value.isMatch(element)) {
            Value node = createValue();
            node.setup(element);
            return(node);
        } else if (ListTransition.isMatch(element)) {
            ListTransition node = createListTransition();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>IRNode</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return IRNode
     */
    public IRNode createWithContext(Element element) throws IOException, SAXException, ParserConfigurationException {
        IRNode node = create(element);
        node.setRContext(createRContext());
        return (node);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(UJAXP.getDocument(file, errorHandler));
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(File file) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(file, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(file, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(File file) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(file, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransition(File file) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(UJAXP.getDocument(file, errorHandler));
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        binaryTreeAutomaton_.setup(file);
        binaryTreeAutomaton_.setRContext(rContext);
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        finalTransition_.setup(file);
        finalTransition_.setRContext(rContext);
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        startTransition_.setup(file);
        startTransition_.setRContext(rContext);
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        elementTransition_.setup(file);
        elementTransition_.setRContext(rContext);
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        textTransition_.setup(file);
        textTransition_.setRContext(rContext);
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        branchingTransition_.setup(file);
        branchingTransition_.setRContext(rContext);
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        mergingTransition_.setup(file);
        mergingTransition_.setRContext(rContext);
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        oneOrMoreAttributeTransition_.setup(file);
        oneOrMoreAttributeTransition_.setRContext(rContext);
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        nonExistentAttributeTransition_.setup(file);
        nonExistentAttributeTransition_.setRContext(rContext);
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        atomicTransition_.setup(file);
        atomicTransition_.setRContext(rContext);
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        data_.setup(file);
        data_.setRContext(rContext);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        param_.setup(file);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        value_.setup(file);
        value_.setRContext(rContext);
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(File file) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(file.toURL());
        listTransition_.setup(file);
        listTransition_.setRContext(rContext);
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(UJAXP.getDocument(uri, errorHandler));
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(String uri) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(uri, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(uri, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(String uri) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(uri, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransition(String uri) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(UJAXP.getDocument(uri, errorHandler));
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        binaryTreeAutomaton_.setup(uri);
        binaryTreeAutomaton_.setRContext(rContext);
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        finalTransition_.setup(uri);
        finalTransition_.setRContext(rContext);
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        startTransition_.setup(uri);
        startTransition_.setRContext(rContext);
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        elementTransition_.setup(uri);
        elementTransition_.setRContext(rContext);
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        textTransition_.setup(uri);
        textTransition_.setRContext(rContext);
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        branchingTransition_.setup(uri);
        branchingTransition_.setRContext(rContext);
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        mergingTransition_.setup(uri);
        mergingTransition_.setRContext(rContext);
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        oneOrMoreAttributeTransition_.setup(uri);
        oneOrMoreAttributeTransition_.setRContext(rContext);
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        nonExistentAttributeTransition_.setup(uri);
        nonExistentAttributeTransition_.setRContext(rContext);
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        atomicTransition_.setup(uri);
        atomicTransition_.setRContext(rContext);
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        data_.setup(uri);
        data_.setRContext(rContext);
        return (data_);
    }

    /**
     * Creates a <code>Param</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        param_.setup(uri);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>Value</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        value_.setup(uri);
        value_.setRContext(rContext);
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(String uri) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(URelaxer.makeURL(uri));
        listTransition_.setup(uri);
        listTransition_.setRContext(rContext);
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(UJAXP.getDocument(url, errorHandler));
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(URL url) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(url, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(url, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(URL url) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(url, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransition(URL url) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(UJAXP.getDocument(url, errorHandler));
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        binaryTreeAutomaton_.setup(url);
        binaryTreeAutomaton_.setRContext(rContext);
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        finalTransition_.setup(url);
        finalTransition_.setRContext(rContext);
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        startTransition_.setup(url);
        startTransition_.setRContext(rContext);
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        elementTransition_.setup(url);
        elementTransition_.setRContext(rContext);
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        textTransition_.setup(url);
        textTransition_.setRContext(rContext);
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        branchingTransition_.setup(url);
        branchingTransition_.setRContext(rContext);
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        mergingTransition_.setup(url);
        mergingTransition_.setRContext(rContext);
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        oneOrMoreAttributeTransition_.setup(url);
        oneOrMoreAttributeTransition_.setRContext(rContext);
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        nonExistentAttributeTransition_.setup(url);
        nonExistentAttributeTransition_.setRContext(rContext);
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        atomicTransition_.setup(url);
        atomicTransition_.setRContext(rContext);
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        data_.setup(url);
        data_.setRContext(rContext);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        param_.setup(url);
        param_.setRContext(rContext);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        value_.setup(url);
        value_.setRContext(rContext);
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(URL url) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        RContext rContext = createRContext();
        rContext.setBaseURL(url);
        listTransition_.setup(url);
        listTransition_.setRContext(rContext);
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(UJAXP.getDocument(in, errorHandler));
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(in, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(in, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(in, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransition(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(UJAXP.getDocument(in, errorHandler));
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton(in);
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition(in);
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition(in);
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition(in);
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition(in);
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition(in);
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition(in);
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition(in);
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition(in);
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition(in);
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData(in);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(in);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue(in);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition(in);
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(UJAXP.getDocument(is, errorHandler));
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(is, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(is, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(is, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransition(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(UJAXP.getDocument(is, errorHandler));
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton(is);
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition(is);
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition(is);
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition(is);
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition(is);
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition(is);
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition(is);
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition(is);
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition(is);
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition(is);
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData(is);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(is);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue(is);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition(is);
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(UJAXP.getDocument(reader, errorHandler));
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createData(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData();
        data_.setup(UJAXP.getDocument(reader, errorHandler));
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParam(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam();
        param_.setup(UJAXP.getDocument(reader, errorHandler));
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValue(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue();
        value_.setup(UJAXP.getDocument(reader, errorHandler));
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransition(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(UJAXP.getDocument(reader, errorHandler));
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton(reader);
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        FinalTransition finalTransition_ = createFinalTransition(reader);
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        StartTransition startTransition_ = createStartTransition(reader);
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ElementTransition elementTransition_ = createElementTransition(reader);
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        TextTransition textTransition_ = createTextTransition(reader);
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        BranchingTransition branchingTransition_ = createBranchingTransition(reader);
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        MergingTransition mergingTransition_ = createMergingTransition(reader);
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition(reader);
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition(reader);
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        AtomicTransition atomicTransition_ = createAtomicTransition(reader);
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Data
     */
    public Data createDataWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Data data_ = createData(reader);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Param
     */
    public Param createParamWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Param param_ = createParam(reader);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Value
     */
    public Value createValueWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Value value_ = createValue(reader);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        ListTransition listTransition_ = createListTransition(reader);
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> with Context.
     *
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext() {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> with Context.
     *
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext() {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> with Context.
     *
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext() {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> with Context.
     *
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext() {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> with Context.
     *
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext() {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> with Context.
     *
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext() {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> with Context.
     *
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext() {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> with Context.
     *
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext() {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> with Context.
     *
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext() {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> with Context.
     *
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext() {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> with Context.
     *
     * @return Data
     */
    public Data createDataWithContext() {
        Data data_ = createData();
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> with Context.
     *
     * @return Param
     */
    public Param createParamWithContext() {
        Param param_ = createParam();
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> with Context.
     *
     * @return Value
     */
    public Value createValueWithContext() {
        Value value_ = createValue();
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> with Context.
     *
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext() {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(Document doc) {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(doc);
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(Document doc) {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(doc);
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return StartTransition
     */
    public StartTransition createStartTransition(Document doc) {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(doc);
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(Document doc) {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(doc);
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TextTransition
     */
    public TextTransition createTextTransition(Document doc) {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(doc);
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(Document doc) {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(doc);
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(Document doc) {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(doc);
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(Document doc) {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(doc);
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(Document doc) {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(doc);
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(Document doc) {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(doc);
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Data
     */
    public Data createData(Document doc) {
        Data data_ = createData();
        data_.setup(doc);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParam(Document doc) {
        Param param_ = createParam();
        param_.setup(doc);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Value
     */
    public Value createValue(Document doc) {
        Value value_ = createValue();
        value_.setup(doc);
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ListTransition
     */
    public ListTransition createListTransition(Document doc) {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(doc);
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(Document doc) {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton(doc);
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(Document doc) {
        FinalTransition finalTransition_ = createFinalTransition(doc);
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(Document doc) {
        StartTransition startTransition_ = createStartTransition(doc);
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(Document doc) {
        ElementTransition elementTransition_ = createElementTransition(doc);
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(Document doc) {
        TextTransition textTransition_ = createTextTransition(doc);
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(Document doc) {
        BranchingTransition branchingTransition_ = createBranchingTransition(doc);
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(Document doc) {
        MergingTransition mergingTransition_ = createMergingTransition(doc);
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(Document doc) {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition(doc);
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(Document doc) {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition(doc);
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(Document doc) {
        AtomicTransition atomicTransition_ = createAtomicTransition(doc);
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Data
     */
    public Data createDataWithContext(Document doc) {
        Data data_ = createData(doc);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Param
     */
    public Param createParamWithContext(Document doc) {
        Param param_ = createParam(doc);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return Value
     */
    public Value createValueWithContext(Document doc) {
        Value value_ = createValue(doc);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(Document doc) {
        ListTransition listTransition_ = createListTransition(doc);
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(Element element) {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(element);
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(Element element) {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(element);
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return StartTransition
     */
    public StartTransition createStartTransition(Element element) {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(element);
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(Element element) {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(element);
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TextTransition
     */
    public TextTransition createTextTransition(Element element) {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(element);
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(Element element) {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(element);
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(Element element) {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(element);
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(Element element) {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(element);
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(Element element) {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(element);
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(Element element) {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(element);
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Data
     */
    public Data createData(Element element) {
        Data data_ = createData();
        data_.setup(element);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParam(Element element) {
        Param param_ = createParam();
        param_.setup(element);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Value
     */
    public Value createValue(Element element) {
        Value value_ = createValue();
        value_.setup(element);
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ListTransition
     */
    public ListTransition createListTransition(Element element) {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(element);
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(Element element) {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton(element);
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(Element element) {
        FinalTransition finalTransition_ = createFinalTransition(element);
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(Element element) {
        StartTransition startTransition_ = createStartTransition(element);
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(Element element) {
        ElementTransition elementTransition_ = createElementTransition(element);
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(Element element) {
        TextTransition textTransition_ = createTextTransition(element);
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(Element element) {
        BranchingTransition branchingTransition_ = createBranchingTransition(element);
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(Element element) {
        MergingTransition mergingTransition_ = createMergingTransition(element);
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(Element element) {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition(element);
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(Element element) {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition(element);
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(Element element) {
        AtomicTransition atomicTransition_ = createAtomicTransition(element);
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Data
     */
    public Data createDataWithContext(Element element) {
        Data data_ = createData(element);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Param
     */
    public Param createParamWithContext(Element element) {
        Param param_ = createParam(element);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return Value
     */
    public Value createValueWithContext(Element element) {
        Value value_ = createValue(element);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(Element element) {
        ListTransition listTransition_ = createListTransition(element);
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomaton(RStack stack) {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton();
        binaryTreeAutomaton_.setup(stack);
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FinalTransition
     */
    public FinalTransition createFinalTransition(RStack stack) {
        FinalTransition finalTransition_ = createFinalTransition();
        finalTransition_.setup(stack);
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return StartTransition
     */
    public StartTransition createStartTransition(RStack stack) {
        StartTransition startTransition_ = createStartTransition();
        startTransition_.setup(stack);
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ElementTransition
     */
    public ElementTransition createElementTransition(RStack stack) {
        ElementTransition elementTransition_ = createElementTransition();
        elementTransition_.setup(stack);
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TextTransition
     */
    public TextTransition createTextTransition(RStack stack) {
        TextTransition textTransition_ = createTextTransition();
        textTransition_.setup(stack);
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransition(RStack stack) {
        BranchingTransition branchingTransition_ = createBranchingTransition();
        branchingTransition_.setup(stack);
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return MergingTransition
     */
    public MergingTransition createMergingTransition(RStack stack) {
        MergingTransition mergingTransition_ = createMergingTransition();
        mergingTransition_.setup(stack);
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransition(RStack stack) {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition();
        oneOrMoreAttributeTransition_.setup(stack);
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransition(RStack stack) {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition();
        nonExistentAttributeTransition_.setup(stack);
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransition(RStack stack) {
        AtomicTransition atomicTransition_ = createAtomicTransition();
        atomicTransition_.setup(stack);
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Data
     */
    public Data createData(RStack stack) {
        Data data_ = createData();
        data_.setup(stack);
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParam(RStack stack) {
        Param param_ = createParam();
        param_.setup(stack);
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Value
     */
    public Value createValue(RStack stack) {
        Value value_ = createValue();
        value_.setup(stack);
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ListTransition
     */
    public ListTransition createListTransition(RStack stack) {
        ListTransition listTransition_ = createListTransition();
        listTransition_.setup(stack);
        return (listTransition_);
    }

    /**
     * Creates a <code>BinaryTreeAutomaton</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BinaryTreeAutomaton
     */
    public BinaryTreeAutomaton createBinaryTreeAutomatonWithContext(RStack stack) {
        BinaryTreeAutomaton binaryTreeAutomaton_ = createBinaryTreeAutomaton(stack);
        binaryTreeAutomaton_.setRContext(createRContext());
        return (binaryTreeAutomaton_);
    }

    /**
     * Creates a <code>FinalTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return FinalTransition
     */
    public FinalTransition createFinalTransitionWithContext(RStack stack) {
        FinalTransition finalTransition_ = createFinalTransition(stack);
        finalTransition_.setRContext(createRContext());
        return (finalTransition_);
    }

    /**
     * Creates a <code>StartTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return StartTransition
     */
    public StartTransition createStartTransitionWithContext(RStack stack) {
        StartTransition startTransition_ = createStartTransition(stack);
        startTransition_.setRContext(createRContext());
        return (startTransition_);
    }

    /**
     * Creates a <code>ElementTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ElementTransition
     */
    public ElementTransition createElementTransitionWithContext(RStack stack) {
        ElementTransition elementTransition_ = createElementTransition(stack);
        elementTransition_.setRContext(createRContext());
        return (elementTransition_);
    }

    /**
     * Creates a <code>TextTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return TextTransition
     */
    public TextTransition createTextTransitionWithContext(RStack stack) {
        TextTransition textTransition_ = createTextTransition(stack);
        textTransition_.setRContext(createRContext());
        return (textTransition_);
    }

    /**
     * Creates a <code>BranchingTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return BranchingTransition
     */
    public BranchingTransition createBranchingTransitionWithContext(RStack stack) {
        BranchingTransition branchingTransition_ = createBranchingTransition(stack);
        branchingTransition_.setRContext(createRContext());
        return (branchingTransition_);
    }

    /**
     * Creates a <code>MergingTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return MergingTransition
     */
    public MergingTransition createMergingTransitionWithContext(RStack stack) {
        MergingTransition mergingTransition_ = createMergingTransition(stack);
        mergingTransition_.setRContext(createRContext());
        return (mergingTransition_);
    }

    /**
     * Creates a <code>OneOrMoreAttributeTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return OneOrMoreAttributeTransition
     */
    public OneOrMoreAttributeTransition createOneOrMoreAttributeTransitionWithContext(RStack stack) {
        OneOrMoreAttributeTransition oneOrMoreAttributeTransition_ = createOneOrMoreAttributeTransition(stack);
        oneOrMoreAttributeTransition_.setRContext(createRContext());
        return (oneOrMoreAttributeTransition_);
    }

    /**
     * Creates a <code>NonExistentAttributeTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return NonExistentAttributeTransition
     */
    public NonExistentAttributeTransition createNonExistentAttributeTransitionWithContext(RStack stack) {
        NonExistentAttributeTransition nonExistentAttributeTransition_ = createNonExistentAttributeTransition(stack);
        nonExistentAttributeTransition_.setRContext(createRContext());
        return (nonExistentAttributeTransition_);
    }

    /**
     * Creates a <code>AtomicTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return AtomicTransition
     */
    public AtomicTransition createAtomicTransitionWithContext(RStack stack) {
        AtomicTransition atomicTransition_ = createAtomicTransition(stack);
        atomicTransition_.setRContext(createRContext());
        return (atomicTransition_);
    }

    /**
     * Creates a <code>Data</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Data
     */
    public Data createDataWithContext(RStack stack) {
        Data data_ = createData(stack);
        data_.setRContext(createRContext());
        return (data_);
    }

    /**
     * Creates a <code>Param</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Param
     */
    public Param createParamWithContext(RStack stack) {
        Param param_ = createParam(stack);
        param_.setRContext(createRContext());
        return (param_);
    }

    /**
     * Creates a <code>Value</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return Value
     */
    public Value createValueWithContext(RStack stack) {
        Value value_ = createValue(stack);
        value_.setRContext(createRContext());
        return (value_);
    }

    /**
     * Creates a <code>ListTransition</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return ListTransition
     */
    public ListTransition createListTransitionWithContext(RStack stack) {
        ListTransition listTransition_ = createListTransition(stack);
        listTransition_.setRContext(createRContext());
        return (listTransition_);
    }

    /**
     * Creates a default <code>RContext</code>.
     * This method is a hook method of the AbstractBinaryTreeAutomatonFactory.
     *
     * @return RContext
     */
    public RContext createRContext() {
        return (new RContext());
    }
}
